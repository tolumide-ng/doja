<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="16384315244"><g><title>__GI___libc_malloc (54,490,384 samples, 0.33%)</title><rect x="0.0000%" y="565" width="0.3326%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="54490384"/><text x="0.2500%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20,346,439 samples, 0.12%)</title><rect x="0.3326%" y="565" width="0.1242%" height="15" fill="rgb(217,0,24)" fg:x="54490384" fg:w="20346439"/><text x="0.5826%" y="575.50"></text></g><g><title>[[heap]] (125,618,037 samples, 0.77%)</title><rect x="0.0000%" y="581" width="0.7667%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="125618037"/><text x="0.2500%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (50,781,214 samples, 0.31%)</title><rect x="0.4568%" y="565" width="0.3099%" height="15" fill="rgb(248,212,6)" fg:x="74836823" fg:w="50781214"/><text x="0.7068%" y="575.50"></text></g><g><title>__GI___libc_malloc (52,926,121 samples, 0.32%)</title><rect x="0.7667%" y="565" width="0.3230%" height="15" fill="rgb(208,68,35)" fg:x="125618037" fg:w="52926121"/><text x="1.0167%" y="575.50"></text></g><g><title>__GI___libc_realloc (13,323,982 samples, 0.08%)</title><rect x="1.0897%" y="565" width="0.0813%" height="15" fill="rgb(232,128,0)" fg:x="178544158" fg:w="13323982"/><text x="1.3397%" y="575.50"></text></g><g><title>[[stack]] (98,875,762 samples, 0.60%)</title><rect x="0.7667%" y="581" width="0.6035%" height="15" fill="rgb(207,160,47)" fg:x="125618037" fg:w="98875762"/><text x="1.0167%" y="591.50"></text></g><g><title>chess::board::state::board::Board::is_square_attacked (32,625,659 samples, 0.20%)</title><rect x="1.1710%" y="565" width="0.1991%" height="15" fill="rgb(228,23,34)" fg:x="191868140" fg:w="32625659"/><text x="1.4210%" y="575.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (32,680,103 samples, 0.20%)</title><rect x="1.3704%" y="565" width="0.1995%" height="15" fill="rgb(218,30,26)" fg:x="224537965" fg:w="32680103"/><text x="1.6204%" y="575.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (77,749,746 samples, 0.47%)</title><rect x="1.5699%" y="565" width="0.4745%" height="15" fill="rgb(220,122,19)" fg:x="257218068" fg:w="77749746"/><text x="1.8199%" y="575.50"></text></g><g><title>[libc-2.31.so] (24,181,415 samples, 0.15%)</title><rect x="2.0444%" y="565" width="0.1476%" height="15" fill="rgb(250,228,42)" fg:x="334967814" fg:w="24181415"/><text x="2.2944%" y="575.50"></text></g><g><title>__GI___libc_malloc (154,134,381 samples, 0.94%)</title><rect x="2.1920%" y="565" width="0.9407%" height="15" fill="rgb(240,193,28)" fg:x="359149229" fg:w="154134381"/><text x="2.4420%" y="575.50"></text></g><g><title>__GI___libc_realloc (8,168,517 samples, 0.05%)</title><rect x="3.1328%" y="565" width="0.0499%" height="15" fill="rgb(216,20,37)" fg:x="513283610" fg:w="8168517"/><text x="3.3828%" y="575.50"></text></g><g><title>_int_free (311,524,427 samples, 1.90%)</title><rect x="3.1826%" y="565" width="1.9014%" height="15" fill="rgb(206,188,39)" fg:x="521452127" fg:w="311524427"/><text x="3.4326%" y="575.50">_..</text></g><g><title>_int_malloc (16,056,140 samples, 0.10%)</title><rect x="5.0840%" y="565" width="0.0980%" height="15" fill="rgb(217,207,13)" fg:x="832976554" fg:w="16056140"/><text x="5.3340%" y="575.50"></text></g><g><title>_int_realloc (16,341,094 samples, 0.10%)</title><rect x="5.1820%" y="565" width="0.0997%" height="15" fill="rgb(231,73,38)" fg:x="849032694" fg:w="16341094"/><text x="5.4320%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12,264,979 samples, 0.07%)</title><rect x="5.2817%" y="565" width="0.0749%" height="15" fill="rgb(225,20,46)" fg:x="865373788" fg:w="12264979"/><text x="5.5317%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8,176,485 samples, 0.05%)</title><rect x="5.3067%" y="549" width="0.0499%" height="15" fill="rgb(210,31,41)" fg:x="869462282" fg:w="8176485"/><text x="5.5567%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (52,216,381 samples, 0.32%)</title><rect x="5.3566%" y="565" width="0.3187%" height="15" fill="rgb(221,200,47)" fg:x="877638767" fg:w="52216381"/><text x="5.6066%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12,207,059 samples, 0.07%)</title><rect x="5.6008%" y="549" width="0.0745%" height="15" fill="rgb(226,26,5)" fg:x="917648089" fg:w="12207059"/><text x="5.8508%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12,207,059 samples, 0.07%)</title><rect x="5.6008%" y="533" width="0.0745%" height="15" fill="rgb(249,33,26)" fg:x="917648089" fg:w="12207059"/><text x="5.8508%" y="543.50"></text></g><g><title>alloc::alloc::realloc (12,207,059 samples, 0.07%)</title><rect x="5.6008%" y="517" width="0.0745%" height="15" fill="rgb(235,183,28)" fg:x="917648089" fg:w="12207059"/><text x="5.8508%" y="527.50"></text></g><g><title>chess::bit_move::BitMove::get_piece (40,342,017 samples, 0.25%)</title><rect x="5.6753%" y="565" width="0.2462%" height="15" fill="rgb(221,5,38)" fg:x="929855148" fg:w="40342017"/><text x="5.9253%" y="575.50"></text></g><g><title>chess::board::state::board::Board::get_pawn_attacks (12,118,041 samples, 0.07%)</title><rect x="6.0463%" y="549" width="0.0740%" height="15" fill="rgb(247,18,42)" fg:x="990651254" fg:w="12118041"/><text x="6.2963%" y="559.50"></text></g><g><title>chess::moves::Moves::add_many (4,089,356 samples, 0.02%)</title><rect x="6.1203%" y="549" width="0.0250%" height="15" fill="rgb(241,131,45)" fg:x="1002769295" fg:w="4089356"/><text x="6.3703%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,089,356 samples, 0.02%)</title><rect x="6.1203%" y="533" width="0.0250%" height="15" fill="rgb(249,31,29)" fg:x="1002769295" fg:w="4089356"/><text x="6.3703%" y="543.50"></text></g><g><title>chess::moves::Moves::new (4,093,515 samples, 0.02%)</title><rect x="6.1453%" y="549" width="0.0250%" height="15" fill="rgb(225,111,53)" fg:x="1006858651" fg:w="4093515"/><text x="6.3953%" y="559.50"></text></g><g><title>&lt;chess::moves::Moves as core::default::Default&gt;::default (4,093,515 samples, 0.02%)</title><rect x="6.1453%" y="533" width="0.0250%" height="15" fill="rgb(238,160,17)" fg:x="1006858651" fg:w="4093515"/><text x="6.3953%" y="543.50"></text></g><g><title>chess::board::state::board::Board::gen_movement (52,820,986 samples, 0.32%)</title><rect x="5.9215%" y="565" width="0.3224%" height="15" fill="rgb(214,148,48)" fg:x="970197165" fg:w="52820986"/><text x="6.1715%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::bit_move::BitMove&gt;&gt; (12,065,985 samples, 0.07%)</title><rect x="6.1702%" y="549" width="0.0736%" height="15" fill="rgb(232,36,49)" fg:x="1010952166" fg:w="12065985"/><text x="6.4202%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::bit_move::BitMove&gt;&gt; (12,065,985 samples, 0.07%)</title><rect x="6.1702%" y="533" width="0.0736%" height="15" fill="rgb(209,103,24)" fg:x="1010952166" fg:w="12065985"/><text x="6.4202%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12,065,985 samples, 0.07%)</title><rect x="6.1702%" y="517" width="0.0736%" height="15" fill="rgb(229,88,8)" fg:x="1010952166" fg:w="12065985"/><text x="6.4202%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12,065,985 samples, 0.07%)</title><rect x="6.1702%" y="501" width="0.0736%" height="15" fill="rgb(213,181,19)" fg:x="1010952166" fg:w="12065985"/><text x="6.4202%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (12,065,985 samples, 0.07%)</title><rect x="6.1702%" y="485" width="0.0736%" height="15" fill="rgb(254,191,54)" fg:x="1010952166" fg:w="12065985"/><text x="6.4202%" y="495.50"></text></g><g><title>chess::board::state::board::Board::get_pawn_movement (11,982,016 samples, 0.07%)</title><rect x="6.2439%" y="565" width="0.0731%" height="15" fill="rgb(241,83,37)" fg:x="1023018151" fg:w="11982016"/><text x="6.4939%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,089,622 samples, 0.02%)</title><rect x="6.4392%" y="549" width="0.0250%" height="15" fill="rgb(233,36,39)" fg:x="1055020610" fg:w="4089622"/><text x="6.6892%" y="559.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (19,503,100 samples, 0.12%)</title><rect x="6.4642%" y="549" width="0.1190%" height="15" fill="rgb(226,3,54)" fg:x="1059110232" fg:w="19503100"/><text x="6.7142%" y="559.50"></text></g><g><title>chess::board::state::board::Board::get_sliding_and_leaper_moves (55,871,579 samples, 0.34%)</title><rect x="6.3170%" y="565" width="0.3410%" height="15" fill="rgb(245,192,40)" fg:x="1035000167" fg:w="55871579"/><text x="6.5670%" y="575.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (12,258,414 samples, 0.07%)</title><rect x="6.5832%" y="549" width="0.0748%" height="15" fill="rgb(238,167,29)" fg:x="1078613332" fg:w="12258414"/><text x="6.8332%" y="559.50"></text></g><g><title>chess::board::state::board::Board::is_square_attacked (497,844,615 samples, 3.04%)</title><rect x="6.6580%" y="565" width="3.0385%" height="15" fill="rgb(232,182,51)" fg:x="1090871746" fg:w="497844615"/><text x="6.9080%" y="575.50">che..</text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (185,365,853 samples, 1.13%)</title><rect x="8.5652%" y="549" width="1.1314%" height="15" fill="rgb(231,60,39)" fg:x="1403350508" fg:w="185365853"/><text x="8.8152%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4,071,575 samples, 0.02%)</title><rect x="12.3867%" y="549" width="0.0249%" height="15" fill="rgb(208,69,12)" fg:x="2029478904" fg:w="4071575"/><text x="12.6367%" y="559.50"></text></g><g><title>&lt;u8 as alloc::string::ToString&gt;::to_string (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="549" width="0.5648%" height="15" fill="rgb(235,93,37)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="559.50"></text></g><g><title>alloc::string::String::with_capacity (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="533" width="0.5648%" height="15" fill="rgb(213,116,39)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="517" width="0.5648%" height="15" fill="rgb(222,207,29)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="501" width="0.5648%" height="15" fill="rgb(206,96,30)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="485" width="0.5648%" height="15" fill="rgb(218,138,4)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="469" width="0.5648%" height="15" fill="rgb(250,191,14)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="453" width="0.5648%" height="15" fill="rgb(239,60,40)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="437" width="0.5648%" height="15" fill="rgb(206,27,48)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="447.50"></text></g><g><title>alloc::alloc::alloc (92,544,001 samples, 0.56%)</title><rect x="12.4116%" y="421" width="0.5648%" height="15" fill="rgb(225,35,8)" fg:x="2033550479" fg:w="92544001"/><text x="12.6616%" y="431.50"></text></g><g><title>chess::bit_move::BitMove::get_src (32,669,735 samples, 0.20%)</title><rect x="12.9764%" y="549" width="0.1994%" height="15" fill="rgb(250,213,24)" fg:x="2126094480" fg:w="32669735"/><text x="13.2264%" y="559.50"></text></g><g><title>chess::bit_move::BitMove::get_target (44,725,799 samples, 0.27%)</title><rect x="13.1758%" y="549" width="0.2730%" height="15" fill="rgb(247,123,22)" fg:x="2158764215" fg:w="44725799"/><text x="13.4258%" y="559.50"></text></g><g><title>chess::board::state::board::Board::validate_castling_move (3,906,805 samples, 0.02%)</title><rect x="13.4488%" y="549" width="0.0238%" height="15" fill="rgb(231,138,38)" fg:x="2203490014" fg:w="3906805"/><text x="13.6988%" y="559.50"></text></g><g><title>chess::bit_move::BitMove::get_target (3,906,805 samples, 0.02%)</title><rect x="13.4488%" y="533" width="0.0238%" height="15" fill="rgb(231,145,46)" fg:x="2203490014" fg:w="3906805"/><text x="13.6988%" y="543.50"></text></g><g><title>chess::board::state::board::Board::make_move (752,003,600 samples, 4.59%)</title><rect x="9.6966%" y="565" width="4.5898%" height="15" fill="rgb(251,118,11)" fg:x="1588716361" fg:w="752003600"/><text x="9.9466%" y="575.50">chess..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (133,323,142 samples, 0.81%)</title><rect x="13.4726%" y="549" width="0.8137%" height="15" fill="rgb(217,147,25)" fg:x="2207396819" fg:w="133323142"/><text x="13.7226%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (133,323,142 samples, 0.81%)</title><rect x="13.4726%" y="533" width="0.8137%" height="15" fill="rgb(247,81,37)" fg:x="2207396819" fg:w="133323142"/><text x="13.7226%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (133,323,142 samples, 0.81%)</title><rect x="13.4726%" y="517" width="0.8137%" height="15" fill="rgb(209,12,38)" fg:x="2207396819" fg:w="133323142"/><text x="13.7226%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133,323,142 samples, 0.81%)</title><rect x="13.4726%" y="501" width="0.8137%" height="15" fill="rgb(227,1,9)" fg:x="2207396819" fg:w="133323142"/><text x="13.7226%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (133,323,142 samples, 0.81%)</title><rect x="13.4726%" y="485" width="0.8137%" height="15" fill="rgb(248,47,43)" fg:x="2207396819" fg:w="133323142"/><text x="13.7226%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (133,323,142 samples, 0.81%)</title><rect x="13.4726%" y="469" width="0.8137%" height="15" fill="rgb(221,10,30)" fg:x="2207396819" fg:w="133323142"/><text x="13.7226%" y="479.50"></text></g><g><title>chess::perft::Perft::driver (253,336,397 samples, 1.55%)</title><rect x="14.2863%" y="565" width="1.5462%" height="15" fill="rgb(210,229,1)" fg:x="2340719961" fg:w="253336397"/><text x="14.5363%" y="575.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (40,930,530 samples, 0.25%)</title><rect x="15.8326%" y="565" width="0.2498%" height="15" fill="rgb(222,148,37)" fg:x="2594056358" fg:w="40930530"/><text x="16.0826%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (69,574,850 samples, 0.42%)</title><rect x="16.0824%" y="565" width="0.4246%" height="15" fill="rgb(234,67,33)" fg:x="2634986888" fg:w="69574850"/><text x="16.3324%" y="575.50"></text></g><g><title>[unknown] (2,483,769,756 samples, 15.16%)</title><rect x="1.3702%" y="581" width="15.1594%" height="15" fill="rgb(247,98,35)" fg:x="224493799" fg:w="2483769756"/><text x="1.6202%" y="591.50">[unknown]</text></g><g><title>unlink_chunk.isra.0 (3,701,817 samples, 0.02%)</title><rect x="16.5070%" y="565" width="0.0226%" height="15" fill="rgb(247,138,52)" fg:x="2704561738" fg:w="3701817"/><text x="16.7570%" y="575.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (20,132,356 samples, 0.12%)</title><rect x="16.5296%" y="565" width="0.1229%" height="15" fill="rgb(213,79,30)" fg:x="2708263555" fg:w="20132356"/><text x="16.7796%" y="575.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (68,655,966 samples, 0.42%)</title><rect x="16.6525%" y="565" width="0.4190%" height="15" fill="rgb(246,177,23)" fg:x="2728395911" fg:w="68655966"/><text x="16.9025%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12,175,991 samples, 0.07%)</title><rect x="17.0715%" y="565" width="0.0743%" height="15" fill="rgb(230,62,27)" fg:x="2797051877" fg:w="12175991"/><text x="17.3215%" y="575.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (158,194,496 samples, 0.97%)</title><rect x="17.1458%" y="565" width="0.9655%" height="15" fill="rgb(216,154,8)" fg:x="2809227868" fg:w="158194496"/><text x="17.3958%" y="575.50"></text></g><g><title>__TMC_END__ (287,496,791 samples, 1.75%)</title><rect x="16.5296%" y="581" width="1.7547%" height="15" fill="rgb(244,35,45)" fg:x="2708263555" fg:w="287496791"/><text x="16.7796%" y="591.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (28,337,982 samples, 0.17%)</title><rect x="18.1114%" y="565" width="0.1730%" height="15" fill="rgb(251,115,12)" fg:x="2967422364" fg:w="28337982"/><text x="18.3614%" y="575.50"></text></g><g><title>__rdl_dealloc (96,864,848 samples, 0.59%)</title><rect x="18.2843%" y="581" width="0.5912%" height="15" fill="rgb(240,54,50)" fg:x="2995760346" fg:w="96864848"/><text x="18.5343%" y="591.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (96,864,848 samples, 0.59%)</title><rect x="18.2843%" y="565" width="0.5912%" height="15" fill="rgb(233,84,52)" fg:x="2995760346" fg:w="96864848"/><text x="18.5343%" y="575.50"></text></g><g><title>__rdl_realloc (4,082,449 samples, 0.02%)</title><rect x="18.8755%" y="581" width="0.0249%" height="15" fill="rgb(207,117,47)" fg:x="3092625194" fg:w="4082449"/><text x="19.1255%" y="591.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (4,082,449 samples, 0.02%)</title><rect x="18.8755%" y="565" width="0.0249%" height="15" fill="rgb(249,43,39)" fg:x="3092625194" fg:w="4082449"/><text x="19.1255%" y="575.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (4,079,050 samples, 0.02%)</title><rect x="18.9004%" y="197" width="0.0249%" height="15" fill="rgb(209,38,44)" fg:x="3096708628" fg:w="4079050"/><text x="19.1504%" y="207.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (4,079,050 samples, 0.02%)</title><rect x="18.9004%" y="181" width="0.0249%" height="15" fill="rgb(236,212,23)" fg:x="3096708628" fg:w="4079050"/><text x="19.1504%" y="191.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (4,074,186 samples, 0.02%)</title><rect x="18.9253%" y="197" width="0.0249%" height="15" fill="rgb(242,79,21)" fg:x="3100787678" fg:w="4074186"/><text x="19.1753%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (4,074,186 samples, 0.02%)</title><rect x="18.9253%" y="181" width="0.0249%" height="15" fill="rgb(211,96,35)" fg:x="3100787678" fg:w="4074186"/><text x="19.1753%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (4,074,186 samples, 0.02%)</title><rect x="18.9253%" y="165" width="0.0249%" height="15" fill="rgb(253,215,40)" fg:x="3100787678" fg:w="4074186"/><text x="19.1753%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (4,074,186 samples, 0.02%)</title><rect x="18.9253%" y="149" width="0.0249%" height="15" fill="rgb(211,81,21)" fg:x="3100787678" fg:w="4074186"/><text x="19.1753%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (4,074,186 samples, 0.02%)</title><rect x="18.9253%" y="133" width="0.0249%" height="15" fill="rgb(208,190,38)" fg:x="3100787678" fg:w="4074186"/><text x="19.1753%" y="143.50"></text></g><g><title>chess::board::state::board::Board::get_castling (12,245,460 samples, 0.07%)</title><rect x="18.9004%" y="229" width="0.0747%" height="15" fill="rgb(235,213,38)" fg:x="3096708628" fg:w="12245460"/><text x="19.1504%" y="239.50"></text></g><g><title>chess::board::state::board::Board::is_square_attacked (12,245,460 samples, 0.07%)</title><rect x="18.9004%" y="213" width="0.0747%" height="15" fill="rgb(237,122,38)" fg:x="3096708628" fg:w="12245460"/><text x="19.1504%" y="223.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (4,092,224 samples, 0.02%)</title><rect x="18.9502%" y="197" width="0.0250%" height="15" fill="rgb(244,218,35)" fg:x="3104861864" fg:w="4092224"/><text x="19.2002%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (4,092,224 samples, 0.02%)</title><rect x="18.9502%" y="181" width="0.0250%" height="15" fill="rgb(240,68,47)" fg:x="3104861864" fg:w="4092224"/><text x="19.2002%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (4,092,224 samples, 0.02%)</title><rect x="18.9502%" y="165" width="0.0250%" height="15" fill="rgb(210,16,53)" fg:x="3104861864" fg:w="4092224"/><text x="19.2002%" y="175.50"></text></g><g><title>chess::board::state::board::Board::get_pawn_movement (8,134,814 samples, 0.05%)</title><rect x="18.9752%" y="229" width="0.0497%" height="15" fill="rgb(235,124,12)" fg:x="3108954088" fg:w="8134814"/><text x="19.2252%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (4,062,623 samples, 0.02%)</title><rect x="19.0000%" y="213" width="0.0248%" height="15" fill="rgb(224,169,11)" fg:x="3113026279" fg:w="4062623"/><text x="19.2500%" y="223.50"></text></g><g><title>_int_free (4,090,123 samples, 0.02%)</title><rect x="19.0498%" y="69" width="0.0250%" height="15" fill="rgb(250,166,2)" fg:x="3121177918" fg:w="4090123"/><text x="19.2998%" y="79.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="213" width="0.0747%" height="15" fill="rgb(242,216,29)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="197" width="0.0747%" height="15" fill="rgb(230,116,27)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="181" width="0.0747%" height="15" fill="rgb(228,99,48)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="165" width="0.0747%" height="15" fill="rgb(253,11,6)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="149" width="0.0747%" height="15" fill="rgb(247,143,39)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="133" width="0.0747%" height="15" fill="rgb(236,97,10)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="143.50"></text></g><g><title>alloc::alloc::realloc (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="117" width="0.0747%" height="15" fill="rgb(233,208,19)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="127.50"></text></g><g><title>__GI___libc_realloc (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="101" width="0.0747%" height="15" fill="rgb(216,164,2)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="111.50"></text></g><g><title>_int_realloc (12,246,536 samples, 0.07%)</title><rect x="19.0498%" y="85" width="0.0747%" height="15" fill="rgb(220,129,5)" fg:x="3121177918" fg:w="12246536"/><text x="19.2998%" y="95.50"></text></g><g><title>_int_malloc (8,156,413 samples, 0.05%)</title><rect x="19.0748%" y="69" width="0.0498%" height="15" fill="rgb(242,17,10)" fg:x="3125268041" fg:w="8156413"/><text x="19.3248%" y="79.50"></text></g><g><title>chess::bitboard::Bitboard::pop_bit (4,090,151 samples, 0.02%)</title><rect x="19.1245%" y="213" width="0.0250%" height="15" fill="rgb(242,107,0)" fg:x="3133424454" fg:w="4090151"/><text x="19.3745%" y="223.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (4,090,745 samples, 0.02%)</title><rect x="19.1495%" y="181" width="0.0250%" height="15" fill="rgb(251,28,31)" fg:x="3137514605" fg:w="4090745"/><text x="19.3995%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (4,090,745 samples, 0.02%)</title><rect x="19.1495%" y="165" width="0.0250%" height="15" fill="rgb(233,223,10)" fg:x="3137514605" fg:w="4090745"/><text x="19.3995%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (4,090,745 samples, 0.02%)</title><rect x="19.1495%" y="149" width="0.0250%" height="15" fill="rgb(215,21,27)" fg:x="3137514605" fg:w="4090745"/><text x="19.3995%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (8,143,196 samples, 0.05%)</title><rect x="19.1745%" y="181" width="0.0497%" height="15" fill="rgb(232,23,21)" fg:x="3141605350" fg:w="8143196"/><text x="19.4245%" y="191.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (8,143,196 samples, 0.05%)</title><rect x="19.1745%" y="165" width="0.0497%" height="15" fill="rgb(244,5,23)" fg:x="3141605350" fg:w="8143196"/><text x="19.4245%" y="175.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (16,322,992 samples, 0.10%)</title><rect x="19.1495%" y="213" width="0.0996%" height="15" fill="rgb(226,81,46)" fg:x="3137514605" fg:w="16322992"/><text x="19.3995%" y="223.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (16,322,992 samples, 0.10%)</title><rect x="19.1495%" y="197" width="0.0996%" height="15" fill="rgb(247,70,30)" fg:x="3137514605" fg:w="16322992"/><text x="19.3995%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (4,089,051 samples, 0.02%)</title><rect x="19.2242%" y="181" width="0.0250%" height="15" fill="rgb(212,68,19)" fg:x="3149748546" fg:w="4089051"/><text x="19.4742%" y="191.50"></text></g><g><title>chess::board::state::board::Board::get_sliding_and_leaper_moves (40,837,438 samples, 0.25%)</title><rect x="19.0248%" y="229" width="0.2492%" height="15" fill="rgb(240,187,13)" fg:x="3117088902" fg:w="40837438"/><text x="19.2748%" y="239.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (4,088,743 samples, 0.02%)</title><rect x="19.2491%" y="213" width="0.0250%" height="15" fill="rgb(223,113,26)" fg:x="3153837597" fg:w="4088743"/><text x="19.4991%" y="223.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (4,088,743 samples, 0.02%)</title><rect x="19.2491%" y="197" width="0.0250%" height="15" fill="rgb(206,192,2)" fg:x="3153837597" fg:w="4088743"/><text x="19.4991%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (4,088,743 samples, 0.02%)</title><rect x="19.2491%" y="181" width="0.0250%" height="15" fill="rgb(241,108,4)" fg:x="3153837597" fg:w="4088743"/><text x="19.4991%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (4,088,743 samples, 0.02%)</title><rect x="19.2491%" y="165" width="0.0250%" height="15" fill="rgb(247,173,49)" fg:x="3153837597" fg:w="4088743"/><text x="19.4991%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (4,088,743 samples, 0.02%)</title><rect x="19.2491%" y="149" width="0.0250%" height="15" fill="rgb(224,114,35)" fg:x="3153837597" fg:w="4088743"/><text x="19.4991%" y="159.50"></text></g><g><title>chess::board::state::board::Board::gen_movement (65,280,388 samples, 0.40%)</title><rect x="18.9004%" y="245" width="0.3984%" height="15" fill="rgb(245,159,27)" fg:x="3096708628" fg:w="65280388"/><text x="19.1504%" y="255.50"></text></g><g><title>chess::moves::Moves::new (4,062,676 samples, 0.02%)</title><rect x="19.2741%" y="229" width="0.0248%" height="15" fill="rgb(245,172,44)" fg:x="3157926340" fg:w="4062676"/><text x="19.5241%" y="239.50"></text></g><g><title>&lt;chess::moves::Moves as core::default::Default&gt;::default (4,062,676 samples, 0.02%)</title><rect x="19.2741%" y="213" width="0.0248%" height="15" fill="rgb(236,23,11)" fg:x="3157926340" fg:w="4062676"/><text x="19.5241%" y="223.50"></text></g><g><title>[libc-2.31.so] (4,062,676 samples, 0.02%)</title><rect x="19.2741%" y="197" width="0.0248%" height="15" fill="rgb(205,117,38)" fg:x="3157926340" fg:w="4062676"/><text x="19.5241%" y="207.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4,041,148 samples, 0.02%)</title><rect x="19.4983%" y="229" width="0.0247%" height="15" fill="rgb(237,72,25)" fg:x="3194656412" fg:w="4041148"/><text x="19.7483%" y="239.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (4,041,148 samples, 0.02%)</title><rect x="19.4983%" y="213" width="0.0247%" height="15" fill="rgb(244,70,9)" fg:x="3194656412" fg:w="4041148"/><text x="19.7483%" y="223.50"></text></g><g><title>core::fmt::Arguments::new_v1 (4,041,148 samples, 0.02%)</title><rect x="19.4983%" y="197" width="0.0247%" height="15" fill="rgb(217,125,39)" fg:x="3194656412" fg:w="4041148"/><text x="19.7483%" y="207.50"></text></g><g><title>&lt;chess::board::state::board::Board as core::clone::Clone&gt;::clone (4,090,331 samples, 0.02%)</title><rect x="19.5229%" y="229" width="0.0250%" height="15" fill="rgb(235,36,10)" fg:x="3198697560" fg:w="4090331"/><text x="19.7729%" y="239.50"></text></g><g><title>&lt;chess::constants::ZOBRIST as core::ops::deref::Deref&gt;::deref (12,251,165 samples, 0.07%)</title><rect x="19.5479%" y="229" width="0.0748%" height="15" fill="rgb(251,123,47)" fg:x="3202787891" fg:w="12251165"/><text x="19.7979%" y="239.50"></text></g><g><title>&lt;chess::constants::ZOBRIST as core::ops::deref::Deref&gt;::deref::__stability (12,251,165 samples, 0.07%)</title><rect x="19.5479%" y="213" width="0.0748%" height="15" fill="rgb(221,13,13)" fg:x="3202787891" fg:w="12251165"/><text x="19.7979%" y="223.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (12,251,165 samples, 0.07%)</title><rect x="19.5479%" y="197" width="0.0748%" height="15" fill="rgb(238,131,9)" fg:x="3202787891" fg:w="12251165"/><text x="19.7979%" y="207.50"></text></g><g><title>std::sync::once::Once::call_once (12,251,165 samples, 0.07%)</title><rect x="19.5479%" y="181" width="0.0748%" height="15" fill="rgb(211,50,8)" fg:x="3202787891" fg:w="12251165"/><text x="19.7979%" y="191.50"></text></g><g><title>std::sys::sync::once::futex::Once::is_completed (8,169,252 samples, 0.05%)</title><rect x="19.5728%" y="165" width="0.0499%" height="15" fill="rgb(245,182,24)" fg:x="3206869804" fg:w="8169252"/><text x="19.8228%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (8,169,252 samples, 0.05%)</title><rect x="19.5728%" y="149" width="0.0499%" height="15" fill="rgb(242,14,37)" fg:x="3206869804" fg:w="8169252"/><text x="19.8228%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_load (8,169,252 samples, 0.05%)</title><rect x="19.5728%" y="133" width="0.0499%" height="15" fill="rgb(246,228,12)" fg:x="3206869804" fg:w="8169252"/><text x="19.8228%" y="143.50"></text></g><g><title>alloc::string::String::push (4,069,775 samples, 0.02%)</title><rect x="19.6971%" y="213" width="0.0248%" height="15" fill="rgb(213,55,15)" fg:x="3227241568" fg:w="4069775"/><text x="19.9471%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,069,775 samples, 0.02%)</title><rect x="19.6971%" y="197" width="0.0248%" height="15" fill="rgb(209,9,3)" fg:x="3227241568" fg:w="4069775"/><text x="19.9471%" y="207.50"></text></g><g><title>__GI___libc_malloc (12,192,450 samples, 0.07%)</title><rect x="19.7220%" y="85" width="0.0744%" height="15" fill="rgb(230,59,30)" fg:x="3231311343" fg:w="12192450"/><text x="19.9720%" y="95.50"></text></g><g><title>__rdl_alloc (4,062,562 samples, 0.02%)</title><rect x="19.7964%" y="85" width="0.0248%" height="15" fill="rgb(209,121,21)" fg:x="3243503793" fg:w="4062562"/><text x="20.0464%" y="95.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,062,562 samples, 0.02%)</title><rect x="19.7964%" y="69" width="0.0248%" height="15" fill="rgb(220,109,13)" fg:x="3243503793" fg:w="4062562"/><text x="20.0464%" y="79.50"></text></g><g><title>&lt;u8 as alloc::string::ToString&gt;::to_string (36,608,911 samples, 0.22%)</title><rect x="19.6227%" y="229" width="0.2234%" height="15" fill="rgb(232,18,1)" fg:x="3215039056" fg:w="36608911"/><text x="19.8727%" y="239.50"></text></g><g><title>alloc::string::String::with_capacity (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="213" width="0.1241%" height="15" fill="rgb(215,41,42)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="197" width="0.1241%" height="15" fill="rgb(224,123,36)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="181" width="0.1241%" height="15" fill="rgb(240,125,3)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="165" width="0.1241%" height="15" fill="rgb(205,98,50)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="149" width="0.1241%" height="15" fill="rgb(205,185,37)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="133" width="0.1241%" height="15" fill="rgb(238,207,15)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="117" width="0.1241%" height="15" fill="rgb(213,199,42)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="127.50"></text></g><g><title>alloc::alloc::alloc (20,336,624 samples, 0.12%)</title><rect x="19.7220%" y="101" width="0.1241%" height="15" fill="rgb(235,201,11)" fg:x="3231311343" fg:w="20336624"/><text x="19.9720%" y="111.50"></text></g><g><title>__rust_alloc (4,081,612 samples, 0.02%)</title><rect x="19.8212%" y="85" width="0.0249%" height="15" fill="rgb(207,46,11)" fg:x="3247566355" fg:w="4081612"/><text x="20.0712%" y="95.50"></text></g><g><title>[libc-2.31.so] (11,828,139 samples, 0.07%)</title><rect x="19.8461%" y="229" width="0.0722%" height="15" fill="rgb(241,35,35)" fg:x="3251647967" fg:w="11828139"/><text x="20.0961%" y="239.50"></text></g><g><title>chess::bit_move::BitMove::get_piece (4,092,353 samples, 0.02%)</title><rect x="19.9183%" y="229" width="0.0250%" height="15" fill="rgb(243,32,47)" fg:x="3263476106" fg:w="4092353"/><text x="20.1683%" y="239.50"></text></g><g><title>chess::bit_move::BitMove::get_src (4,076,426 samples, 0.02%)</title><rect x="19.9433%" y="229" width="0.0249%" height="15" fill="rgb(247,202,23)" fg:x="3267568459" fg:w="4076426"/><text x="20.1933%" y="239.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (4,076,426 samples, 0.02%)</title><rect x="19.9433%" y="213" width="0.0249%" height="15" fill="rgb(219,102,11)" fg:x="3267568459" fg:w="4076426"/><text x="20.1933%" y="223.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (16,242,400 samples, 0.10%)</title><rect x="19.9930%" y="165" width="0.0991%" height="15" fill="rgb(243,110,44)" fg:x="3275724302" fg:w="16242400"/><text x="20.2430%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (32,572,303 samples, 0.20%)</title><rect x="19.9930%" y="181" width="0.1988%" height="15" fill="rgb(222,74,54)" fg:x="3275724302" fg:w="32572303"/><text x="20.2430%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (16,329,903 samples, 0.10%)</title><rect x="20.0922%" y="165" width="0.0997%" height="15" fill="rgb(216,99,12)" fg:x="3291966702" fg:w="16329903"/><text x="20.3422%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (4,086,795 samples, 0.02%)</title><rect x="20.1669%" y="149" width="0.0249%" height="15" fill="rgb(226,22,26)" fg:x="3304209810" fg:w="4086795"/><text x="20.4169%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (8,165,206 samples, 0.05%)</title><rect x="20.1919%" y="181" width="0.0498%" height="15" fill="rgb(217,163,10)" fg:x="3308296605" fg:w="8165206"/><text x="20.4419%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (8,165,206 samples, 0.05%)</title><rect x="20.1919%" y="165" width="0.0498%" height="15" fill="rgb(213,25,53)" fg:x="3308296605" fg:w="8165206"/><text x="20.4419%" y="175.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (48,907,163 samples, 0.30%)</title><rect x="19.9930%" y="213" width="0.2985%" height="15" fill="rgb(252,105,26)" fg:x="3275724302" fg:w="48907163"/><text x="20.2430%" y="223.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (48,907,163 samples, 0.30%)</title><rect x="19.9930%" y="197" width="0.2985%" height="15" fill="rgb(220,39,43)" fg:x="3275724302" fg:w="48907163"/><text x="20.2430%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (8,169,654 samples, 0.05%)</title><rect x="20.2417%" y="181" width="0.0499%" height="15" fill="rgb(229,68,48)" fg:x="3316461811" fg:w="8169654"/><text x="20.4917%" y="191.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (16,051,122 samples, 0.10%)</title><rect x="20.2915%" y="213" width="0.0980%" height="15" fill="rgb(252,8,32)" fg:x="3324631465" fg:w="16051122"/><text x="20.5415%" y="223.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (11,958,665 samples, 0.07%)</title><rect x="20.3165%" y="197" width="0.0730%" height="15" fill="rgb(223,20,43)" fg:x="3328723922" fg:w="11958665"/><text x="20.5665%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (11,958,665 samples, 0.07%)</title><rect x="20.3165%" y="181" width="0.0730%" height="15" fill="rgb(229,81,49)" fg:x="3328723922" fg:w="11958665"/><text x="20.5665%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (8,170,027 samples, 0.05%)</title><rect x="20.3397%" y="165" width="0.0499%" height="15" fill="rgb(236,28,36)" fg:x="3332512560" fg:w="8170027"/><text x="20.5897%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (8,170,027 samples, 0.05%)</title><rect x="20.3397%" y="149" width="0.0499%" height="15" fill="rgb(249,185,26)" fg:x="3332512560" fg:w="8170027"/><text x="20.5897%" y="159.50"></text></g><g><title>chess::board::piece::&lt;impl core::ops::index::Index&lt;chess::board::piece::Piece&gt; for [T]&gt;::index (4,088,551 samples, 0.02%)</title><rect x="20.3895%" y="197" width="0.0250%" height="15" fill="rgb(249,174,33)" fg:x="3340682587" fg:w="4088551"/><text x="20.6395%" y="207.50"></text></g><g><title>chess::board::state::board::Board::is_square_attacked (77,205,279 samples, 0.47%)</title><rect x="19.9682%" y="229" width="0.4712%" height="15" fill="rgb(233,201,37)" fg:x="3271644885" fg:w="77205279"/><text x="20.2182%" y="239.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (8,167,577 samples, 0.05%)</title><rect x="20.3895%" y="213" width="0.0498%" height="15" fill="rgb(221,78,26)" fg:x="3340682587" fg:w="8167577"/><text x="20.6395%" y="223.50"></text></g><g><title>chess::color::&lt;impl core::ops::index::Index&lt;chess::color::Color&gt; for [T]&gt;::index (4,079,026 samples, 0.02%)</title><rect x="20.4145%" y="197" width="0.0249%" height="15" fill="rgb(250,127,30)" fg:x="3344771138" fg:w="4079026"/><text x="20.6645%" y="207.50"></text></g><g><title>chess::board::state::board::Board::validate_castling_move (4,080,209 samples, 0.02%)</title><rect x="20.4394%" y="229" width="0.0249%" height="15" fill="rgb(230,49,44)" fg:x="3348850164" fg:w="4080209"/><text x="20.6894%" y="239.50"></text></g><g><title>chess::bit_move::BitMove::get_target (4,080,209 samples, 0.02%)</title><rect x="20.4394%" y="213" width="0.0249%" height="15" fill="rgb(229,67,23)" fg:x="3348850164" fg:w="4080209"/><text x="20.6894%" y="223.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (4,071,577 samples, 0.02%)</title><rect x="20.4643%" y="229" width="0.0249%" height="15" fill="rgb(249,83,47)" fg:x="3352930373" fg:w="4071577"/><text x="20.7143%" y="239.50"></text></g><g><title>chess::board::piece::&lt;impl core::ops::index::Index&lt;chess::board::piece::Piece&gt; for [T]&gt;::index (4,071,577 samples, 0.02%)</title><rect x="20.4643%" y="213" width="0.0249%" height="15" fill="rgb(215,43,3)" fg:x="3352930373" fg:w="4071577"/><text x="20.7143%" y="223.50"></text></g><g><title>core::cmp::PartialEq::ne (4,092,993 samples, 0.02%)</title><rect x="20.4891%" y="229" width="0.0250%" height="15" fill="rgb(238,154,13)" fg:x="3357001950" fg:w="4092993"/><text x="20.7391%" y="239.50"></text></g><g><title>&lt;chess::color::Color as core::cmp::PartialEq&gt;::eq (4,092,993 samples, 0.02%)</title><rect x="20.4891%" y="213" width="0.0250%" height="15" fill="rgb(219,56,2)" fg:x="3357001950" fg:w="4092993"/><text x="20.7391%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (44,791,834 samples, 0.27%)</title><rect x="20.5141%" y="229" width="0.2734%" height="15" fill="rgb(233,0,4)" fg:x="3361094943" fg:w="44791834"/><text x="20.7641%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (20,440,610 samples, 0.12%)</title><rect x="20.6627%" y="213" width="0.1248%" height="15" fill="rgb(235,30,7)" fg:x="3385446167" fg:w="20440610"/><text x="20.9127%" y="223.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (4,088,329 samples, 0.02%)</title><rect x="20.7625%" y="197" width="0.0250%" height="15" fill="rgb(250,79,13)" fg:x="3401798448" fg:w="4088329"/><text x="21.0125%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (4,088,329 samples, 0.02%)</title><rect x="20.7625%" y="181" width="0.0250%" height="15" fill="rgb(211,146,34)" fg:x="3401798448" fg:w="4088329"/><text x="21.0125%" y="191.50"></text></g><g><title>__GI___libc_free (8,144,278 samples, 0.05%)</title><rect x="20.7875%" y="133" width="0.0497%" height="15" fill="rgb(228,22,38)" fg:x="3405886777" fg:w="8144278"/><text x="21.0375%" y="143.50"></text></g><g><title>__rdl_dealloc (4,087,971 samples, 0.02%)</title><rect x="20.8372%" y="133" width="0.0250%" height="15" fill="rgb(235,168,5)" fg:x="3414031055" fg:w="4087971"/><text x="21.0872%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4,087,971 samples, 0.02%)</title><rect x="20.8372%" y="117" width="0.0250%" height="15" fill="rgb(221,155,16)" fg:x="3414031055" fg:w="4087971"/><text x="21.0872%" y="127.50"></text></g><g><title>__rust_dealloc (4,090,342 samples, 0.02%)</title><rect x="20.8621%" y="133" width="0.0250%" height="15" fill="rgb(215,215,53)" fg:x="3418119026" fg:w="4090342"/><text x="21.1121%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (39,604,627 samples, 0.24%)</title><rect x="20.7875%" y="229" width="0.2417%" height="15" fill="rgb(223,4,10)" fg:x="3405886777" fg:w="39604627"/><text x="21.0375%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (39,604,627 samples, 0.24%)</title><rect x="20.7875%" y="213" width="0.2417%" height="15" fill="rgb(234,103,6)" fg:x="3405886777" fg:w="39604627"/><text x="21.0375%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (39,604,627 samples, 0.24%)</title><rect x="20.7875%" y="197" width="0.2417%" height="15" fill="rgb(227,97,0)" fg:x="3405886777" fg:w="39604627"/><text x="21.0375%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39,604,627 samples, 0.24%)</title><rect x="20.7875%" y="181" width="0.2417%" height="15" fill="rgb(234,150,53)" fg:x="3405886777" fg:w="39604627"/><text x="21.0375%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39,604,627 samples, 0.24%)</title><rect x="20.7875%" y="165" width="0.2417%" height="15" fill="rgb(228,201,54)" fg:x="3405886777" fg:w="39604627"/><text x="21.0375%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (39,604,627 samples, 0.24%)</title><rect x="20.7875%" y="149" width="0.2417%" height="15" fill="rgb(222,22,37)" fg:x="3405886777" fg:w="39604627"/><text x="21.0375%" y="159.50"></text></g><g><title>_int_free (23,282,036 samples, 0.14%)</title><rect x="20.8871%" y="133" width="0.1421%" height="15" fill="rgb(237,53,32)" fg:x="3422209368" fg:w="23282036"/><text x="21.1371%" y="143.50"></text></g><g><title>chess::board::state::board::Board::make_move (287,591,912 samples, 1.76%)</title><rect x="19.2989%" y="245" width="1.7553%" height="15" fill="rgb(233,25,53)" fg:x="3161989016" fg:w="287591912"/><text x="19.5489%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4,089,524 samples, 0.02%)</title><rect x="21.0292%" y="229" width="0.0250%" height="15" fill="rgb(210,40,34)" fg:x="3445491404" fg:w="4089524"/><text x="21.2792%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8,164,470 samples, 0.05%)</title><rect x="22.1621%" y="213" width="0.0498%" height="15" fill="rgb(241,220,44)" fg:x="3631116446" fg:w="8164470"/><text x="22.4121%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4,079,292 samples, 0.02%)</title><rect x="22.1871%" y="197" width="0.0249%" height="15" fill="rgb(235,28,35)" fg:x="3635201624" fg:w="4079292"/><text x="22.4371%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (4,079,292 samples, 0.02%)</title><rect x="22.1871%" y="181" width="0.0249%" height="15" fill="rgb(210,56,17)" fg:x="3635201624" fg:w="4079292"/><text x="22.4371%" y="191.50"></text></g><g><title>[libc-2.31.so] (36,720,212 samples, 0.22%)</title><rect x="22.2120%" y="213" width="0.2241%" height="15" fill="rgb(224,130,29)" fg:x="3639280916" fg:w="36720212"/><text x="22.4620%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,087,303 samples, 0.02%)</title><rect x="22.4859%" y="197" width="0.0249%" height="15" fill="rgb(235,212,8)" fg:x="3684168533" fg:w="4087303"/><text x="22.7359%" y="207.50"></text></g><g><title>__GI___libc_malloc (15,893,498 samples, 0.10%)</title><rect x="22.5359%" y="85" width="0.0970%" height="15" fill="rgb(223,33,50)" fg:x="3692348576" fg:w="15893498"/><text x="22.7859%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="197" width="0.1946%" height="15" fill="rgb(219,149,13)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="181" width="0.1946%" height="15" fill="rgb(250,156,29)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="165" width="0.1946%" height="15" fill="rgb(216,193,19)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="149" width="0.1946%" height="15" fill="rgb(216,135,14)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="133" width="0.1946%" height="15" fill="rgb(241,47,5)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="117" width="0.1946%" height="15" fill="rgb(233,42,35)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="127.50"></text></g><g><title>alloc::alloc::alloc (31,877,432 samples, 0.19%)</title><rect x="22.5109%" y="101" width="0.1946%" height="15" fill="rgb(231,13,6)" fg:x="3688255836" fg:w="31877432"/><text x="22.7609%" y="111.50"></text></g><g><title>__rdl_alloc (11,891,194 samples, 0.07%)</title><rect x="22.6329%" y="85" width="0.0726%" height="15" fill="rgb(207,181,40)" fg:x="3708242074" fg:w="11891194"/><text x="22.8829%" y="95.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11,891,194 samples, 0.07%)</title><rect x="22.6329%" y="69" width="0.0726%" height="15" fill="rgb(254,173,49)" fg:x="3708242074" fg:w="11891194"/><text x="22.8829%" y="79.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (28,122,726 samples, 0.17%)</title><rect x="22.8787%" y="181" width="0.1716%" height="15" fill="rgb(221,1,38)" fg:x="3748526161" fg:w="28122726"/><text x="23.1287%" y="191.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (28,122,726 samples, 0.17%)</title><rect x="22.8787%" y="165" width="0.1716%" height="15" fill="rgb(206,124,46)" fg:x="3748526161" fg:w="28122726"/><text x="23.1287%" y="175.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (11,789,938 samples, 0.07%)</title><rect x="22.9784%" y="149" width="0.0720%" height="15" fill="rgb(249,21,11)" fg:x="3764858949" fg:w="11789938"/><text x="23.2284%" y="159.50"></text></g><g><title>std::sync::once::Once::call_once (11,789,938 samples, 0.07%)</title><rect x="22.9784%" y="133" width="0.0720%" height="15" fill="rgb(222,201,40)" fg:x="3764858949" fg:w="11789938"/><text x="23.2284%" y="143.50"></text></g><g><title>std::sys::sync::once::futex::Once::is_completed (11,789,938 samples, 0.07%)</title><rect x="22.9784%" y="117" width="0.0720%" height="15" fill="rgb(235,61,29)" fg:x="3764858949" fg:w="11789938"/><text x="23.2284%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (4,072,160 samples, 0.02%)</title><rect x="23.0255%" y="101" width="0.0249%" height="15" fill="rgb(219,207,3)" fg:x="3772576727" fg:w="4072160"/><text x="23.2755%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_load (4,072,160 samples, 0.02%)</title><rect x="23.0255%" y="85" width="0.0249%" height="15" fill="rgb(222,56,46)" fg:x="3772576727" fg:w="4072160"/><text x="23.2755%" y="95.50"></text></g><g><title>chess::board::piece::Piece::pawn (12,259,179 samples, 0.07%)</title><rect x="23.0504%" y="181" width="0.0748%" height="15" fill="rgb(239,76,54)" fg:x="3776648887" fg:w="12259179"/><text x="23.3004%" y="191.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (12,267,026 samples, 0.07%)</title><rect x="23.2750%" y="133" width="0.0749%" height="15" fill="rgb(231,124,27)" fg:x="3813449225" fg:w="12267026"/><text x="23.5250%" y="143.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (101,729,871 samples, 0.62%)</title><rect x="23.1750%" y="149" width="0.6209%" height="15" fill="rgb(249,195,6)" fg:x="3797066390" fg:w="101729871"/><text x="23.4250%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (73,080,010 samples, 0.45%)</title><rect x="23.3499%" y="133" width="0.4460%" height="15" fill="rgb(237,174,47)" fg:x="3825716251" fg:w="73080010"/><text x="23.5999%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (20,359,934 samples, 0.12%)</title><rect x="23.6716%" y="117" width="0.1243%" height="15" fill="rgb(206,201,31)" fg:x="3878436327" fg:w="20359934"/><text x="23.9216%" y="127.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (20,440,236 samples, 0.12%)</title><rect x="23.8458%" y="133" width="0.1248%" height="15" fill="rgb(231,57,52)" fg:x="3906964472" fg:w="20440236"/><text x="24.0958%" y="143.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (53,099,615 samples, 0.32%)</title><rect x="23.7959%" y="149" width="0.3241%" height="15" fill="rgb(248,177,22)" fg:x="3898796261" fg:w="53099615"/><text x="24.0459%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (24,491,168 samples, 0.15%)</title><rect x="23.9705%" y="133" width="0.1495%" height="15" fill="rgb(215,211,37)" fg:x="3927404708" fg:w="24491168"/><text x="24.2205%" y="143.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (175,155,948 samples, 1.07%)</title><rect x="23.1252%" y="181" width="1.0690%" height="15" fill="rgb(241,128,51)" fg:x="3788908066" fg:w="175155948"/><text x="23.3752%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (166,997,624 samples, 1.02%)</title><rect x="23.1750%" y="165" width="1.0193%" height="15" fill="rgb(227,165,31)" fg:x="3797066390" fg:w="166997624"/><text x="23.4250%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (12,168,138 samples, 0.07%)</title><rect x="24.1200%" y="149" width="0.0743%" height="15" fill="rgb(228,167,24)" fg:x="3951895876" fg:w="12168138"/><text x="24.3700%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (48,575,321 samples, 0.30%)</title><rect x="24.2922%" y="149" width="0.2965%" height="15" fill="rgb(228,143,12)" fg:x="3980111038" fg:w="48575321"/><text x="24.5422%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (24,480,987 samples, 0.15%)</title><rect x="24.4393%" y="133" width="0.1494%" height="15" fill="rgb(249,149,8)" fg:x="4004205372" fg:w="24480987"/><text x="24.6893%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (16,321,373 samples, 0.10%)</title><rect x="24.4891%" y="117" width="0.0996%" height="15" fill="rgb(243,35,44)" fg:x="4012364986" fg:w="16321373"/><text x="24.7391%" y="127.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (72,770,413 samples, 0.44%)</title><rect x="24.1943%" y="181" width="0.4441%" height="15" fill="rgb(246,89,9)" fg:x="3964064014" fg:w="72770413"/><text x="24.4443%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (56,723,389 samples, 0.35%)</title><rect x="24.2922%" y="165" width="0.3462%" height="15" fill="rgb(233,213,13)" fg:x="3980111038" fg:w="56723389"/><text x="24.5422%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (8,148,068 samples, 0.05%)</title><rect x="24.5887%" y="149" width="0.0497%" height="15" fill="rgb(233,141,41)" fg:x="4028686359" fg:w="8148068"/><text x="24.8387%" y="159.50"></text></g><g><title>chess::board::piece::&lt;impl core::ops::index::Index&lt;chess::board::piece::Piece&gt; for [T]&gt;::index (4,090,874 samples, 0.02%)</title><rect x="24.6384%" y="165" width="0.0250%" height="15" fill="rgb(239,167,4)" fg:x="4036834427" fg:w="4090874"/><text x="24.8884%" y="175.50"></text></g><g><title>chess::board::state::board::Board::get_castling (368,982,105 samples, 2.25%)</title><rect x="22.4361%" y="213" width="2.2520%" height="15" fill="rgb(209,217,16)" fg:x="3676001128" fg:w="368982105"/><text x="22.6861%" y="223.50">c..</text></g><g><title>chess::board::state::board::Board::is_square_attacked (324,849,965 samples, 1.98%)</title><rect x="22.7055%" y="197" width="1.9827%" height="15" fill="rgb(219,88,35)" fg:x="3720133268" fg:w="324849965"/><text x="22.9555%" y="207.50">c..</text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (8,148,806 samples, 0.05%)</title><rect x="24.6384%" y="181" width="0.0497%" height="15" fill="rgb(220,193,23)" fg:x="4036834427" fg:w="8148806"/><text x="24.8884%" y="191.50"></text></g><g><title>chess::color::&lt;impl core::ops::index::Index&lt;chess::color::Color&gt; for [T]&gt;::index (4,057,932 samples, 0.02%)</title><rect x="24.6634%" y="165" width="0.0248%" height="15" fill="rgb(230,90,52)" fg:x="4040925301" fg:w="4057932"/><text x="24.9134%" y="175.50"></text></g><g><title>&lt;chess::color::Color as core::ops::bit::Not&gt;::not (4,076,087 samples, 0.02%)</title><rect x="24.9839%" y="197" width="0.0249%" height="15" fill="rgb(252,106,19)" fg:x="4093435182" fg:w="4076087"/><text x="25.2339%" y="207.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (4,060,795 samples, 0.02%)</title><rect x="25.0087%" y="197" width="0.0248%" height="15" fill="rgb(206,74,20)" fg:x="4097511269" fg:w="4060795"/><text x="25.2587%" y="207.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (4,060,795 samples, 0.02%)</title><rect x="25.0087%" y="181" width="0.0248%" height="15" fill="rgb(230,138,44)" fg:x="4097511269" fg:w="4060795"/><text x="25.2587%" y="191.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (4,060,795 samples, 0.02%)</title><rect x="25.0087%" y="165" width="0.0248%" height="15" fill="rgb(235,182,43)" fg:x="4097511269" fg:w="4060795"/><text x="25.2587%" y="175.50"></text></g><g><title>std::sync::once::Once::call_once (4,060,795 samples, 0.02%)</title><rect x="25.0087%" y="149" width="0.0248%" height="15" fill="rgb(242,16,51)" fg:x="4097511269" fg:w="4060795"/><text x="25.2587%" y="159.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (8,153,600 samples, 0.05%)</title><rect x="25.0335%" y="197" width="0.0498%" height="15" fill="rgb(248,9,4)" fg:x="4101572064" fg:w="8153600"/><text x="25.2835%" y="207.50"></text></g><g><title>__GI___libc_malloc (4,089,418 samples, 0.02%)</title><rect x="25.1083%" y="133" width="0.0250%" height="15" fill="rgb(210,31,22)" fg:x="4113817691" fg:w="4089418"/><text x="25.3583%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (12,262,824 samples, 0.07%)</title><rect x="25.0833%" y="149" width="0.0748%" height="15" fill="rgb(239,54,39)" fg:x="4109725664" fg:w="12262824"/><text x="25.3333%" y="159.50"></text></g><g><title>__rdl_alloc (4,081,379 samples, 0.02%)</title><rect x="25.1332%" y="133" width="0.0249%" height="15" fill="rgb(230,99,41)" fg:x="4117907109" fg:w="4081379"/><text x="25.3832%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4,081,379 samples, 0.02%)</title><rect x="25.1332%" y="117" width="0.0249%" height="15" fill="rgb(253,106,12)" fg:x="4117907109" fg:w="4081379"/><text x="25.3832%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (20,396,454 samples, 0.12%)</title><rect x="25.0833%" y="181" width="0.1245%" height="15" fill="rgb(213,46,41)" fg:x="4109725664" fg:w="20396454"/><text x="25.3333%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20,396,454 samples, 0.12%)</title><rect x="25.0833%" y="165" width="0.1245%" height="15" fill="rgb(215,133,35)" fg:x="4109725664" fg:w="20396454"/><text x="25.3333%" y="175.50"></text></g><g><title>core::cmp::max (8,133,630 samples, 0.05%)</title><rect x="25.1581%" y="149" width="0.0496%" height="15" fill="rgb(213,28,5)" fg:x="4121988488" fg:w="8133630"/><text x="25.4081%" y="159.50"></text></g><g><title>core::cmp::Ord::max (8,133,630 samples, 0.05%)</title><rect x="25.1581%" y="133" width="0.0496%" height="15" fill="rgb(215,77,49)" fg:x="4121988488" fg:w="8133630"/><text x="25.4081%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8,133,630 samples, 0.05%)</title><rect x="25.1581%" y="117" width="0.0496%" height="15" fill="rgb(248,100,22)" fg:x="4121988488" fg:w="8133630"/><text x="25.4081%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24,490,024 samples, 0.15%)</title><rect x="25.0833%" y="197" width="0.1495%" height="15" fill="rgb(208,67,9)" fg:x="4109725664" fg:w="24490024"/><text x="25.3333%" y="207.50"></text></g><g><title>core::ptr::write (4,093,570 samples, 0.02%)</title><rect x="25.2078%" y="181" width="0.0250%" height="15" fill="rgb(219,133,21)" fg:x="4130122118" fg:w="4093570"/><text x="25.4578%" y="191.50"></text></g><g><title>chess::bit_move::BitMove::new (4,093,423 samples, 0.02%)</title><rect x="25.2328%" y="197" width="0.0250%" height="15" fill="rgb(246,46,29)" fg:x="4134215688" fg:w="4093423"/><text x="25.4828%" y="207.50"></text></g><g><title>chess::board::piece::Piece::pawn (8,146,619 samples, 0.05%)</title><rect x="25.2577%" y="197" width="0.0497%" height="15" fill="rgb(246,185,52)" fg:x="4138309111" fg:w="8146619"/><text x="25.5077%" y="207.50"></text></g><g><title>chess::board::state::board::Board::get_pawn_attacks (105,536,525 samples, 0.64%)</title><rect x="24.6881%" y="213" width="0.6441%" height="15" fill="rgb(252,136,11)" fg:x="4044983233" fg:w="105536525"/><text x="24.9381%" y="223.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (4,064,028 samples, 0.02%)</title><rect x="25.3075%" y="197" width="0.0248%" height="15" fill="rgb(219,138,53)" fg:x="4146455730" fg:w="4064028"/><text x="25.5575%" y="207.50"></text></g><g><title>chess::board::piece::&lt;impl core::ops::index::Index&lt;chess::board::piece::Piece&gt; for [T]&gt;::index (4,064,028 samples, 0.02%)</title><rect x="25.3075%" y="181" width="0.0248%" height="15" fill="rgb(211,51,23)" fg:x="4146455730" fg:w="4064028"/><text x="25.5575%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27,954,271 samples, 0.17%)</title><rect x="25.4817%" y="197" width="0.1706%" height="15" fill="rgb(247,221,28)" fg:x="4175000358" fg:w="27954271"/><text x="25.7317%" y="207.50"></text></g><g><title>__GI___libc_malloc (28,273,719 samples, 0.17%)</title><rect x="25.7021%" y="85" width="0.1726%" height="15" fill="rgb(251,222,45)" fg:x="4211120208" fg:w="28273719"/><text x="25.9521%" y="95.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (40,520,512 samples, 0.25%)</title><rect x="25.6523%" y="197" width="0.2473%" height="15" fill="rgb(217,162,53)" fg:x="4202954629" fg:w="40520512"/><text x="25.9023%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40,520,512 samples, 0.25%)</title><rect x="25.6523%" y="181" width="0.2473%" height="15" fill="rgb(229,93,14)" fg:x="4202954629" fg:w="40520512"/><text x="25.9023%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36,432,622 samples, 0.22%)</title><rect x="25.6773%" y="165" width="0.2224%" height="15" fill="rgb(209,67,49)" fg:x="4207042519" fg:w="36432622"/><text x="25.9273%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (36,432,622 samples, 0.22%)</title><rect x="25.6773%" y="149" width="0.2224%" height="15" fill="rgb(213,87,29)" fg:x="4207042519" fg:w="36432622"/><text x="25.9273%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36,432,622 samples, 0.22%)</title><rect x="25.6773%" y="133" width="0.2224%" height="15" fill="rgb(205,151,52)" fg:x="4207042519" fg:w="36432622"/><text x="25.9273%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36,432,622 samples, 0.22%)</title><rect x="25.6773%" y="117" width="0.2224%" height="15" fill="rgb(253,215,39)" fg:x="4207042519" fg:w="36432622"/><text x="25.9273%" y="127.50"></text></g><g><title>alloc::alloc::alloc (36,432,622 samples, 0.22%)</title><rect x="25.6773%" y="101" width="0.2224%" height="15" fill="rgb(221,220,41)" fg:x="4207042519" fg:w="36432622"/><text x="25.9273%" y="111.50"></text></g><g><title>core::ptr::read_volatile (4,081,214 samples, 0.02%)</title><rect x="25.8747%" y="85" width="0.0249%" height="15" fill="rgb(218,133,21)" fg:x="4239393927" fg:w="4081214"/><text x="26.1247%" y="95.50"></text></g><g><title>chess::bit_move::BitMove::new (8,188,186 samples, 0.05%)</title><rect x="25.8996%" y="197" width="0.0500%" height="15" fill="rgb(221,193,43)" fg:x="4243475141" fg:w="8188186"/><text x="26.1496%" y="207.50"></text></g><g><title>chess::board::state::board::Board::double_push_targets (4,088,955 samples, 0.02%)</title><rect x="25.9496%" y="197" width="0.0250%" height="15" fill="rgb(240,128,52)" fg:x="4251663327" fg:w="4088955"/><text x="26.1996%" y="207.50"></text></g><g><title>chess::bitboard::Bitboard::south (4,088,955 samples, 0.02%)</title><rect x="25.9496%" y="181" width="0.0250%" height="15" fill="rgb(253,114,12)" fg:x="4251663327" fg:w="4088955"/><text x="26.1996%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (4,090,574 samples, 0.02%)</title><rect x="25.9746%" y="197" width="0.0250%" height="15" fill="rgb(215,223,47)" fg:x="4255752282" fg:w="4090574"/><text x="26.2246%" y="207.50"></text></g><g><title>chess::board::state::board::Board::get_pawn_movement (121,096,769 samples, 0.74%)</title><rect x="25.3323%" y="213" width="0.7391%" height="15" fill="rgb(248,225,23)" fg:x="4150519758" fg:w="121096769"/><text x="25.5823%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (11,773,671 samples, 0.07%)</title><rect x="25.9995%" y="197" width="0.0719%" height="15" fill="rgb(250,108,0)" fg:x="4259842856" fg:w="11773671"/><text x="26.2495%" y="207.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (12,230,620 samples, 0.07%)</title><rect x="27.2597%" y="197" width="0.0746%" height="15" fill="rgb(228,208,7)" fg:x="4466317095" fg:w="12230620"/><text x="27.5097%" y="207.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (12,230,620 samples, 0.07%)</title><rect x="27.2597%" y="181" width="0.0746%" height="15" fill="rgb(244,45,10)" fg:x="4466317095" fg:w="12230620"/><text x="27.5097%" y="191.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (12,230,620 samples, 0.07%)</title><rect x="27.2597%" y="165" width="0.0746%" height="15" fill="rgb(207,125,25)" fg:x="4466317095" fg:w="12230620"/><text x="27.5097%" y="175.50"></text></g><g><title>std::sync::once::Once::call_once (12,230,620 samples, 0.07%)</title><rect x="27.2597%" y="149" width="0.0746%" height="15" fill="rgb(210,195,18)" fg:x="4466317095" fg:w="12230620"/><text x="27.5097%" y="159.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (12,231,504 samples, 0.07%)</title><rect x="27.3344%" y="197" width="0.0747%" height="15" fill="rgb(249,80,12)" fg:x="4478547715" fg:w="12231504"/><text x="27.5844%" y="207.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (8,168,358 samples, 0.05%)</title><rect x="27.9084%" y="149" width="0.0499%" height="15" fill="rgb(221,65,9)" fg:x="4572605390" fg:w="8168358"/><text x="28.1584%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8,156,407 samples, 0.05%)</title><rect x="27.9583%" y="149" width="0.0498%" height="15" fill="rgb(235,49,36)" fg:x="4580773748" fg:w="8156407"/><text x="28.2083%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (4,077,525 samples, 0.02%)</title><rect x="27.9832%" y="133" width="0.0249%" height="15" fill="rgb(225,32,20)" fg:x="4584852630" fg:w="4077525"/><text x="28.2332%" y="143.50"></text></g><g><title>[libc-2.31.so] (4,081,055 samples, 0.02%)</title><rect x="29.1142%" y="53" width="0.0249%" height="15" fill="rgb(215,141,46)" fg:x="4770160372" fg:w="4081055"/><text x="29.3642%" y="63.50"></text></g><g><title>__PRETTY_FUNCTION__.4467 (3,671,560 samples, 0.02%)</title><rect x="29.1391%" y="53" width="0.0224%" height="15" fill="rgb(250,160,47)" fg:x="4774241427" fg:w="3671560"/><text x="29.3891%" y="63.50"></text></g><g><title>_int_free (52,600,765 samples, 0.32%)</title><rect x="29.1615%" y="53" width="0.3210%" height="15" fill="rgb(216,222,40)" fg:x="4777912987" fg:w="52600765"/><text x="29.4115%" y="63.50"></text></g><g><title>malloc_consolidate (23,849,510 samples, 0.15%)</title><rect x="30.4967%" y="37" width="0.1456%" height="15" fill="rgb(234,217,39)" fg:x="4996668956" fg:w="23849510"/><text x="30.7467%" y="47.50"></text></g><g><title>_int_malloc (198,091,304 samples, 1.21%)</title><rect x="29.4825%" y="53" width="1.2090%" height="15" fill="rgb(207,178,40)" fg:x="4830513752" fg:w="198091304"/><text x="29.7325%" y="63.50"></text></g><g><title>unlink_chunk.isra.0 (8,086,590 samples, 0.05%)</title><rect x="30.6422%" y="37" width="0.0494%" height="15" fill="rgb(221,136,13)" fg:x="5020518466" fg:w="8086590"/><text x="30.8922%" y="47.50"></text></g><g><title>__GI___libc_realloc (395,339,695 samples, 2.41%)</title><rect x="28.3785%" y="85" width="2.4129%" height="15" fill="rgb(249,199,10)" fg:x="4649615047" fg:w="395339695"/><text x="28.6285%" y="95.50">__..</text></g><g><title>_int_realloc (326,623,020 samples, 1.99%)</title><rect x="28.7979%" y="69" width="1.9935%" height="15" fill="rgb(249,222,13)" fg:x="4718331722" fg:w="326623020"/><text x="29.0479%" y="79.50">_..</text></g><g><title>unlink_chunk.isra.0 (16,349,686 samples, 0.10%)</title><rect x="30.6916%" y="53" width="0.0998%" height="15" fill="rgb(244,185,38)" fg:x="5028605056" fg:w="16349686"/><text x="30.9416%" y="63.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (436,153,809 samples, 2.66%)</title><rect x="28.3785%" y="133" width="2.6620%" height="15" fill="rgb(236,202,9)" fg:x="4649615047" fg:w="436153809"/><text x="28.6285%" y="143.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (436,153,809 samples, 2.66%)</title><rect x="28.3785%" y="117" width="2.6620%" height="15" fill="rgb(250,229,37)" fg:x="4649615047" fg:w="436153809"/><text x="28.6285%" y="127.50">al..</text></g><g><title>alloc::alloc::realloc (436,153,809 samples, 2.66%)</title><rect x="28.3785%" y="101" width="2.6620%" height="15" fill="rgb(206,174,23)" fg:x="4649615047" fg:w="436153809"/><text x="28.6285%" y="111.50">al..</text></g><g><title>__rdl_realloc (40,814,114 samples, 0.25%)</title><rect x="30.7914%" y="85" width="0.2491%" height="15" fill="rgb(211,33,43)" fg:x="5044954742" fg:w="40814114"/><text x="31.0414%" y="95.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (36,732,500 samples, 0.22%)</title><rect x="30.8163%" y="69" width="0.2242%" height="15" fill="rgb(245,58,50)" fg:x="5049036356" fg:w="36732500"/><text x="31.0663%" y="79.50"></text></g><g><title>__GI___libc_malloc (40,514,197 samples, 0.25%)</title><rect x="31.0405%" y="133" width="0.2473%" height="15" fill="rgb(244,68,36)" fg:x="5085768856" fg:w="40514197"/><text x="31.2905%" y="143.50"></text></g><g><title>__rdl_alloc (16,304,970 samples, 0.10%)</title><rect x="31.2877%" y="133" width="0.0995%" height="15" fill="rgb(232,229,15)" fg:x="5126283053" fg:w="16304970"/><text x="31.5377%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12,217,489 samples, 0.07%)</title><rect x="31.3127%" y="117" width="0.0746%" height="15" fill="rgb(254,30,23)" fg:x="5130370534" fg:w="12217489"/><text x="31.5627%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (4,078,853 samples, 0.02%)</title><rect x="31.3873%" y="133" width="0.0249%" height="15" fill="rgb(235,160,14)" fg:x="5142588023" fg:w="4078853"/><text x="31.6373%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (578,135,226 samples, 3.53%)</title><rect x="28.0081%" y="149" width="3.5286%" height="15" fill="rgb(212,155,44)" fg:x="4588930155" fg:w="578135226"/><text x="28.2581%" y="159.50">all..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (20,398,505 samples, 0.12%)</title><rect x="31.4122%" y="133" width="0.1245%" height="15" fill="rgb(226,2,50)" fg:x="5146666876" fg:w="20398505"/><text x="31.6622%" y="143.50"></text></g><g><title>core::alloc::layout::Layout::array (8,174,410 samples, 0.05%)</title><rect x="31.5367%" y="149" width="0.0499%" height="15" fill="rgb(234,177,6)" fg:x="5167065381" fg:w="8174410"/><text x="31.7867%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (8,174,410 samples, 0.05%)</title><rect x="31.5367%" y="133" width="0.0499%" height="15" fill="rgb(217,24,9)" fg:x="5167065381" fg:w="8174410"/><text x="31.7867%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (618,346,815 samples, 3.77%)</title><rect x="27.9084%" y="165" width="3.7740%" height="15" fill="rgb(220,13,46)" fg:x="4572605390" fg:w="618346815"/><text x="28.1584%" y="175.50">allo..</text></g><g><title>core::cmp::max (15,712,414 samples, 0.10%)</title><rect x="31.5865%" y="149" width="0.0959%" height="15" fill="rgb(239,221,27)" fg:x="5175239791" fg:w="15712414"/><text x="31.8365%" y="159.50"></text></g><g><title>core::cmp::Ord::max (15,712,414 samples, 0.10%)</title><rect x="31.5865%" y="133" width="0.0959%" height="15" fill="rgb(222,198,25)" fg:x="5175239791" fg:w="15712414"/><text x="31.8365%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (15,712,414 samples, 0.10%)</title><rect x="31.5865%" y="117" width="0.0959%" height="15" fill="rgb(211,99,13)" fg:x="5175239791" fg:w="15712414"/><text x="31.8365%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (622,412,815 samples, 3.80%)</title><rect x="27.9084%" y="181" width="3.7988%" height="15" fill="rgb(232,111,31)" fg:x="4572605390" fg:w="622412815"/><text x="28.1584%" y="191.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (4,066,000 samples, 0.02%)</title><rect x="31.6824%" y="165" width="0.0248%" height="15" fill="rgb(245,82,37)" fg:x="5190952205" fg:w="4066000"/><text x="31.9324%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (724,612,923 samples, 4.42%)</title><rect x="27.4090%" y="197" width="4.4226%" height="15" fill="rgb(227,149,46)" fg:x="4490779219" fg:w="724612923"/><text x="27.6590%" y="207.50">alloc..</text></g><g><title>core::ptr::write (20,373,937 samples, 0.12%)</title><rect x="31.7073%" y="181" width="0.1244%" height="15" fill="rgb(218,36,50)" fg:x="5195018205" fg:w="20373937"/><text x="31.9573%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (4,082,917 samples, 0.02%)</title><rect x="31.8316%" y="197" width="0.0249%" height="15" fill="rgb(226,80,48)" fg:x="5215392142" fg:w="4082917"/><text x="32.0816%" y="207.50"></text></g><g><title>chess::bitboard::Bitboard::pop_bit (32,625,918 samples, 0.20%)</title><rect x="31.8565%" y="197" width="0.1991%" height="15" fill="rgb(238,224,15)" fg:x="5219475059" fg:w="32625918"/><text x="32.1065%" y="207.50"></text></g><g><title>chess::board::piece::Piece::color (12,075,345 samples, 0.07%)</title><rect x="32.0557%" y="197" width="0.0737%" height="15" fill="rgb(241,136,10)" fg:x="5252100977" fg:w="12075345"/><text x="32.3057%" y="207.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (32,598,465 samples, 0.20%)</title><rect x="32.3285%" y="149" width="0.1990%" height="15" fill="rgb(208,32,45)" fg:x="5296810449" fg:w="32598465"/><text x="32.5785%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (125,482,706 samples, 0.77%)</title><rect x="32.1790%" y="165" width="0.7659%" height="15" fill="rgb(207,135,9)" fg:x="5272304925" fg:w="125482706"/><text x="32.4290%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (68,378,717 samples, 0.42%)</title><rect x="32.5275%" y="149" width="0.4173%" height="15" fill="rgb(206,86,44)" fg:x="5329408914" fg:w="68378717"/><text x="32.7775%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (24,516,332 samples, 0.15%)</title><rect x="32.7952%" y="133" width="0.1496%" height="15" fill="rgb(245,177,15)" fg:x="5373271299" fg:w="24516332"/><text x="33.0452%" y="143.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (24,276,218 samples, 0.15%)</title><rect x="33.0448%" y="149" width="0.1482%" height="15" fill="rgb(206,64,50)" fg:x="5414162672" fg:w="24276218"/><text x="33.2948%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (56,950,579 samples, 0.35%)</title><rect x="32.9448%" y="165" width="0.3476%" height="15" fill="rgb(234,36,40)" fg:x="5397787631" fg:w="56950579"/><text x="33.1948%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (16,299,320 samples, 0.10%)</title><rect x="33.1930%" y="149" width="0.0995%" height="15" fill="rgb(213,64,8)" fg:x="5438438890" fg:w="16299320"/><text x="33.4430%" y="159.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (198,725,001 samples, 1.21%)</title><rect x="32.1294%" y="197" width="1.2129%" height="15" fill="rgb(210,75,36)" fg:x="5264176322" fg:w="198725001"/><text x="32.3794%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (190,596,398 samples, 1.16%)</title><rect x="32.1790%" y="181" width="1.1633%" height="15" fill="rgb(229,88,21)" fg:x="5272304925" fg:w="190596398"/><text x="32.4290%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (8,163,113 samples, 0.05%)</title><rect x="33.2924%" y="165" width="0.0498%" height="15" fill="rgb(252,204,47)" fg:x="5454738210" fg:w="8163113"/><text x="33.5424%" y="175.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (16,047,828 samples, 0.10%)</title><rect x="33.4917%" y="149" width="0.0979%" height="15" fill="rgb(208,77,27)" fg:x="5487382595" fg:w="16047828"/><text x="33.7417%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (93,504,894 samples, 0.57%)</title><rect x="33.4418%" y="165" width="0.5707%" height="15" fill="rgb(221,76,26)" fg:x="5479206251" fg:w="93504894"/><text x="33.6918%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (69,280,722 samples, 0.42%)</title><rect x="33.5896%" y="149" width="0.4228%" height="15" fill="rgb(225,139,18)" fg:x="5503430423" fg:w="69280722"/><text x="33.8396%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (40,713,171 samples, 0.25%)</title><rect x="33.7640%" y="133" width="0.2485%" height="15" fill="rgb(230,137,11)" fg:x="5531997974" fg:w="40713171"/><text x="34.0140%" y="143.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (15,915,683 samples, 0.10%)</title><rect x="34.0850%" y="149" width="0.0971%" height="15" fill="rgb(212,28,1)" fg:x="5584586164" fg:w="15915683"/><text x="34.3350%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (44,081,327 samples, 0.27%)</title><rect x="34.0125%" y="165" width="0.2690%" height="15" fill="rgb(248,164,17)" fg:x="5572711145" fg:w="44081327"/><text x="34.2625%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (16,290,625 samples, 0.10%)</title><rect x="34.1821%" y="149" width="0.0994%" height="15" fill="rgb(222,171,42)" fg:x="5600501847" fg:w="16290625"/><text x="34.4321%" y="159.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (174,319,678 samples, 1.06%)</title><rect x="33.3423%" y="197" width="1.0639%" height="15" fill="rgb(243,84,45)" fg:x="5462901323" fg:w="174319678"/><text x="33.5923%" y="207.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (158,014,750 samples, 0.96%)</title><rect x="33.4418%" y="181" width="0.9644%" height="15" fill="rgb(252,49,23)" fg:x="5479206251" fg:w="158014750"/><text x="33.6918%" y="191.50"></text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (20,428,529 samples, 0.12%)</title><rect x="34.2815%" y="165" width="0.1247%" height="15" fill="rgb(215,19,7)" fg:x="5616792472" fg:w="20428529"/><text x="34.5315%" y="175.50"></text></g><g><title>chess::board::state::board::Board::get_sliding_and_leaper_moves (1,381,867,770 samples, 8.43%)</title><rect x="26.0714%" y="213" width="8.4341%" height="15" fill="rgb(238,81,41)" fg:x="4271616527" fg:w="1381867770"/><text x="26.3214%" y="223.50">chess::board..</text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (16,263,296 samples, 0.10%)</title><rect x="34.4062%" y="197" width="0.0993%" height="15" fill="rgb(210,199,37)" fg:x="5637221001" fg:w="16263296"/><text x="34.6562%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68,921,824 samples, 0.42%)</title><rect x="34.5532%" y="197" width="0.4207%" height="15" fill="rgb(244,192,49)" fg:x="5661304770" fg:w="68921824"/><text x="34.8032%" y="207.50"></text></g><g><title>[libc-2.31.so] (68,921,824 samples, 0.42%)</title><rect x="34.5532%" y="181" width="0.4207%" height="15" fill="rgb(226,211,11)" fg:x="5661304770" fg:w="68921824"/><text x="34.8032%" y="191.50"></text></g><g><title>chess::moves::Moves::add_many (84,437,208 samples, 0.52%)</title><rect x="34.5055%" y="213" width="0.5154%" height="15" fill="rgb(236,162,54)" fg:x="5653484297" fg:w="84437208"/><text x="34.7555%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7,694,911 samples, 0.05%)</title><rect x="34.9739%" y="197" width="0.0470%" height="15" fill="rgb(220,229,9)" fg:x="5730226594" fg:w="7694911"/><text x="35.2239%" y="207.50"></text></g><g><title>chess::moves::Moves::new (16,390,352 samples, 0.10%)</title><rect x="35.0208%" y="213" width="0.1000%" height="15" fill="rgb(250,87,22)" fg:x="5737921505" fg:w="16390352"/><text x="35.2708%" y="223.50"></text></g><g><title>&lt;chess::moves::Moves as core::default::Default&gt;::default (16,390,352 samples, 0.10%)</title><rect x="35.0208%" y="197" width="0.1000%" height="15" fill="rgb(239,43,17)" fg:x="5737921505" fg:w="16390352"/><text x="35.2708%" y="207.50"></text></g><g><title>[libc-2.31.so] (16,390,352 samples, 0.10%)</title><rect x="35.0208%" y="181" width="0.1000%" height="15" fill="rgb(231,177,25)" fg:x="5737921505" fg:w="16390352"/><text x="35.2708%" y="191.50"></text></g><g><title>[libc-2.31.so] (16,317,921 samples, 0.10%)</title><rect x="35.1209%" y="133" width="0.0996%" height="15" fill="rgb(219,179,1)" fg:x="5754311857" fg:w="16317921"/><text x="35.3709%" y="143.50"></text></g><g><title>__GI___libc_free (32,429,378 samples, 0.20%)</title><rect x="35.2205%" y="133" width="0.1979%" height="15" fill="rgb(238,219,53)" fg:x="5770629778" fg:w="32429378"/><text x="35.4705%" y="143.50"></text></g><g><title>__rdl_dealloc (12,088,549 samples, 0.07%)</title><rect x="35.4184%" y="133" width="0.0738%" height="15" fill="rgb(232,167,36)" fg:x="5803059156" fg:w="12088549"/><text x="35.6684%" y="143.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12,088,549 samples, 0.07%)</title><rect x="35.4184%" y="117" width="0.0738%" height="15" fill="rgb(244,19,51)" fg:x="5803059156" fg:w="12088549"/><text x="35.6684%" y="127.50"></text></g><g><title>__rust_dealloc (8,014,972 samples, 0.05%)</title><rect x="35.4922%" y="133" width="0.0489%" height="15" fill="rgb(224,6,22)" fg:x="5815147705" fg:w="8014972"/><text x="35.7422%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (150,139,690 samples, 0.92%)</title><rect x="35.1209%" y="165" width="0.9164%" height="15" fill="rgb(224,145,5)" fg:x="5754311857" fg:w="150139690"/><text x="35.3709%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (150,139,690 samples, 0.92%)</title><rect x="35.1209%" y="149" width="0.9164%" height="15" fill="rgb(234,130,49)" fg:x="5754311857" fg:w="150139690"/><text x="35.3709%" y="159.50"></text></g><g><title>_int_free (81,288,870 samples, 0.50%)</title><rect x="35.5411%" y="133" width="0.4961%" height="15" fill="rgb(254,6,2)" fg:x="5823162677" fg:w="81288870"/><text x="35.7911%" y="143.50"></text></g><g><title>chess::board::state::board::Board::gen_movement (2,281,290,735 samples, 13.92%)</title><rect x="22.1621%" y="229" width="13.9236%" height="15" fill="rgb(208,96,46)" fg:x="3631116446" fg:w="2281290735"/><text x="22.4121%" y="239.50">chess::board::state::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;chess::bit_move::BitMove&gt;&gt; (158,095,324 samples, 0.96%)</title><rect x="35.1209%" y="213" width="0.9649%" height="15" fill="rgb(239,3,39)" fg:x="5754311857" fg:w="158095324"/><text x="35.3709%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;chess::bit_move::BitMove&gt;&gt; (158,095,324 samples, 0.96%)</title><rect x="35.1209%" y="197" width="0.9649%" height="15" fill="rgb(233,210,1)" fg:x="5754311857" fg:w="158095324"/><text x="35.3709%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (158,095,324 samples, 0.96%)</title><rect x="35.1209%" y="181" width="0.9649%" height="15" fill="rgb(244,137,37)" fg:x="5754311857" fg:w="158095324"/><text x="35.3709%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7,955,634 samples, 0.05%)</title><rect x="36.0372%" y="165" width="0.0486%" height="15" fill="rgb(240,136,2)" fg:x="5904451547" fg:w="7955634"/><text x="36.2872%" y="175.50"></text></g><g><title>&lt;chess::board::piece::Piece as core::cmp::PartialEq&gt;::eq (40,668,730 samples, 0.25%)</title><rect x="43.5224%" y="213" width="0.2482%" height="15" fill="rgb(239,18,37)" fg:x="7130854074" fg:w="40668730"/><text x="43.7724%" y="223.50"></text></g><g><title>core::array::&lt;impl core::clone::Clone for [T: N]&gt;::clone (36,156,773 samples, 0.22%)</title><rect x="44.7906%" y="197" width="0.2207%" height="15" fill="rgb(218,185,22)" fg:x="7338640827" fg:w="36156773"/><text x="45.0406%" y="207.50"></text></g><g><title>&lt;T as core::array::SpecArrayClone&gt;::clone (36,156,773 samples, 0.22%)</title><rect x="44.7906%" y="181" width="0.2207%" height="15" fill="rgb(225,218,4)" fg:x="7338640827" fg:w="36156773"/><text x="45.0406%" y="191.50"></text></g><g><title>&lt;chess::board::state::board::Board as core::clone::Clone&gt;::clone (219,587,362 samples, 1.34%)</title><rect x="43.7707%" y="213" width="1.3402%" height="15" fill="rgb(230,182,32)" fg:x="7171522804" fg:w="219587362"/><text x="44.0207%" y="223.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (16,312,566 samples, 0.10%)</title><rect x="45.0113%" y="197" width="0.0996%" height="15" fill="rgb(242,56,43)" fg:x="7374797600" fg:w="16312566"/><text x="45.2613%" y="207.50"></text></g><g><title>&lt;chess::color::Color as core::ops::bit::Not&gt;::not (89,119,182 samples, 0.54%)</title><rect x="45.1109%" y="213" width="0.5439%" height="15" fill="rgb(233,99,24)" fg:x="7391110166" fg:w="89119182"/><text x="45.3609%" y="223.50"></text></g><g><title>&lt;chess::constants::ZOBRIST as core::ops::deref::Deref&gt;::deref (202,188,750 samples, 1.23%)</title><rect x="45.6548%" y="213" width="1.2340%" height="15" fill="rgb(234,209,42)" fg:x="7480229348" fg:w="202188750"/><text x="45.9048%" y="223.50"></text></g><g><title>&lt;chess::constants::ZOBRIST as core::ops::deref::Deref&gt;::deref::__stability (202,188,750 samples, 1.23%)</title><rect x="45.6548%" y="197" width="1.2340%" height="15" fill="rgb(227,7,12)" fg:x="7480229348" fg:w="202188750"/><text x="45.9048%" y="207.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (189,950,764 samples, 1.16%)</title><rect x="45.7295%" y="181" width="1.1593%" height="15" fill="rgb(245,203,43)" fg:x="7492467334" fg:w="189950764"/><text x="45.9795%" y="191.50"></text></g><g><title>std::sync::once::Once::call_once (189,950,764 samples, 1.16%)</title><rect x="45.7295%" y="165" width="1.1593%" height="15" fill="rgb(238,205,33)" fg:x="7492467334" fg:w="189950764"/><text x="45.9795%" y="175.50"></text></g><g><title>std::sys::sync::once::futex::Once::is_completed (153,240,626 samples, 0.94%)</title><rect x="45.9536%" y="149" width="0.9353%" height="15" fill="rgb(231,56,7)" fg:x="7529177472" fg:w="153240626"/><text x="46.2036%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (117,252,329 samples, 0.72%)</title><rect x="46.1732%" y="133" width="0.7156%" height="15" fill="rgb(244,186,29)" fg:x="7565165769" fg:w="117252329"/><text x="46.4232%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_load (117,252,329 samples, 0.72%)</title><rect x="46.1732%" y="117" width="0.7156%" height="15" fill="rgb(234,111,31)" fg:x="7565165769" fg:w="117252329"/><text x="46.4232%" y="127.50"></text></g><g><title>alloc::string::String::push (76,745,135 samples, 0.47%)</title><rect x="48.8499%" y="197" width="0.4684%" height="15" fill="rgb(241,149,10)" fg:x="8003713936" fg:w="76745135"/><text x="49.0999%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (76,745,135 samples, 0.47%)</title><rect x="48.8499%" y="181" width="0.4684%" height="15" fill="rgb(249,206,44)" fg:x="8003713936" fg:w="76745135"/><text x="49.0999%" y="191.50"></text></g><g><title>core::ptr::write (4,078,409 samples, 0.02%)</title><rect x="49.2934%" y="165" width="0.0249%" height="15" fill="rgb(251,153,30)" fg:x="8076380662" fg:w="4078409"/><text x="49.5434%" y="175.50"></text></g><g><title>__GI___libc_malloc (549,955,195 samples, 3.36%)</title><rect x="49.4921%" y="69" width="3.3566%" height="15" fill="rgb(239,152,38)" fg:x="8108946639" fg:w="549955195"/><text x="49.7421%" y="79.50">__G..</text></g><g><title>__rdl_alloc (167,587,974 samples, 1.02%)</title><rect x="52.8487%" y="69" width="1.0229%" height="15" fill="rgb(249,139,47)" fg:x="8658901834" fg:w="167587974"/><text x="53.0987%" y="79.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (167,587,974 samples, 1.02%)</title><rect x="52.8487%" y="53" width="1.0229%" height="15" fill="rgb(244,64,35)" fg:x="8658901834" fg:w="167587974"/><text x="53.0987%" y="63.50"></text></g><g><title>&lt;u8 as alloc::string::ToString&gt;::to_string (1,227,567,609 samples, 7.49%)</title><rect x="46.8889%" y="213" width="7.4923%" height="15" fill="rgb(216,46,15)" fg:x="7682418098" fg:w="1227567609"/><text x="47.1389%" y="223.50">&lt;u8 as all..</text></g><g><title>alloc::string::String::with_capacity (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="197" width="5.0629%" height="15" fill="rgb(250,74,19)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="207.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="181" width="5.0629%" height="15" fill="rgb(249,42,33)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="191.50">alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="165" width="5.0629%" height="15" fill="rgb(242,149,17)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="175.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="149" width="5.0629%" height="15" fill="rgb(244,29,21)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="159.50">alloc:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="133" width="5.0629%" height="15" fill="rgb(220,130,37)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="143.50">alloc:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="117" width="5.0629%" height="15" fill="rgb(211,67,2)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="127.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="101" width="5.0629%" height="15" fill="rgb(235,68,52)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="111.50">alloc:..</text></g><g><title>alloc::alloc::alloc (829,526,636 samples, 5.06%)</title><rect x="49.3183%" y="85" width="5.0629%" height="15" fill="rgb(246,142,3)" fg:x="8080459071" fg:w="829526636"/><text x="49.5683%" y="95.50">alloc:..</text></g><g><title>__rust_alloc (83,495,899 samples, 0.51%)</title><rect x="53.8716%" y="69" width="0.5096%" height="15" fill="rgb(241,25,7)" fg:x="8826489808" fg:w="83495899"/><text x="54.1216%" y="79.50"></text></g><g><title>[libc-2.31.so] (567,713,853 samples, 3.46%)</title><rect x="54.3812%" y="213" width="3.4650%" height="15" fill="rgb(242,119,39)" fg:x="8909985707" fg:w="567713853"/><text x="54.6312%" y="223.50">[li..</text></g><g><title>chess::bit_move::BitMove::get_capture (4,092,778 samples, 0.02%)</title><rect x="57.8462%" y="213" width="0.0250%" height="15" fill="rgb(241,98,45)" fg:x="9477699560" fg:w="4092778"/><text x="58.0962%" y="223.50"></text></g><g><title>chess::bit_move::BitMove::get_piece (105,317,131 samples, 0.64%)</title><rect x="57.8712%" y="213" width="0.6428%" height="15" fill="rgb(254,28,30)" fg:x="9481792338" fg:w="105317131"/><text x="58.1212%" y="223.50"></text></g><g><title>&lt;chess::board::piece::Piece as core::convert::From&lt;u8&gt;&gt;::from (57,180,066 samples, 0.35%)</title><rect x="58.1650%" y="197" width="0.3490%" height="15" fill="rgb(241,142,54)" fg:x="9529929403" fg:w="57180066"/><text x="58.4150%" y="207.50"></text></g><g><title>chess::bit_move::BitMove::get_promotion (32,084,838 samples, 0.20%)</title><rect x="58.5139%" y="213" width="0.1958%" height="15" fill="rgb(222,85,15)" fg:x="9587109469" fg:w="32084838"/><text x="58.7639%" y="223.50"></text></g><g><title>chess::bit_move::BitMove::get_src (68,267,625 samples, 0.42%)</title><rect x="58.7098%" y="213" width="0.4167%" height="15" fill="rgb(210,85,47)" fg:x="9619194307" fg:w="68267625"/><text x="58.9598%" y="223.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (7,478,370 samples, 0.05%)</title><rect x="59.0808%" y="197" width="0.0456%" height="15" fill="rgb(224,206,25)" fg:x="9679983562" fg:w="7478370"/><text x="59.3308%" y="207.50"></text></g><g><title>core::fmt::Arguments::new_v1 (3,387,760 samples, 0.02%)</title><rect x="59.1058%" y="181" width="0.0207%" height="15" fill="rgb(243,201,19)" fg:x="9684074172" fg:w="3387760"/><text x="59.3558%" y="191.50"></text></g><g><title>chess::bit_move::BitMove::get_target (61,199,695 samples, 0.37%)</title><rect x="59.1264%" y="213" width="0.3735%" height="15" fill="rgb(236,59,4)" fg:x="9687461932" fg:w="61199695"/><text x="59.3764%" y="223.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (36,708,034 samples, 0.22%)</title><rect x="59.2759%" y="197" width="0.2240%" height="15" fill="rgb(254,179,45)" fg:x="9711953593" fg:w="36708034"/><text x="59.5259%" y="207.50"></text></g><g><title>chess::bitboard::Bitboard::get_lsb1 (35,771,426 samples, 0.22%)</title><rect x="59.5000%" y="213" width="0.2183%" height="15" fill="rgb(226,14,10)" fg:x="9748661627" fg:w="35771426"/><text x="59.7500%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (35,771,426 samples, 0.22%)</title><rect x="59.5000%" y="197" width="0.2183%" height="15" fill="rgb(244,27,41)" fg:x="9748661627" fg:w="35771426"/><text x="59.7500%" y="207.50"></text></g><g><title>chess::bitboard::Bitboard::pop_bit (52,989,989 samples, 0.32%)</title><rect x="59.7183%" y="213" width="0.3234%" height="15" fill="rgb(235,35,32)" fg:x="9784433053" fg:w="52989989"/><text x="59.9683%" y="223.50"></text></g><g><title>chess::bitboard::Bitboard::set_bit (60,498,832 samples, 0.37%)</title><rect x="60.0417%" y="213" width="0.3692%" height="15" fill="rgb(218,68,31)" fg:x="9837423042" fg:w="60498832"/><text x="60.2917%" y="223.50"></text></g><g><title>chess::board::castling::_::&lt;impl chess::board::castling::Castling&gt;::bits (4,077,825 samples, 0.02%)</title><rect x="60.4110%" y="213" width="0.0249%" height="15" fill="rgb(207,120,37)" fg:x="9897921874" fg:w="4077825"/><text x="60.6610%" y="223.50"></text></g><g><title>chess::board::castling::_::InternalBitFlags::bits (4,077,825 samples, 0.02%)</title><rect x="60.4110%" y="197" width="0.0249%" height="15" fill="rgb(227,98,0)" fg:x="9897921874" fg:w="4077825"/><text x="60.6610%" y="207.50"></text></g><g><title>chess::board::piece::Piece::all_pieces_for (7,863,009 samples, 0.05%)</title><rect x="60.4358%" y="213" width="0.0480%" height="15" fill="rgb(207,7,3)" fg:x="9901999699" fg:w="7863009"/><text x="60.6858%" y="223.50"></text></g><g><title>chess::board::piece::Piece::color (4,079,197 samples, 0.02%)</title><rect x="60.4838%" y="213" width="0.0249%" height="15" fill="rgb(206,98,19)" fg:x="9909862708" fg:w="4079197"/><text x="60.7338%" y="223.50"></text></g><g><title>chess::board::piece::Piece::king (40,189,012 samples, 0.25%)</title><rect x="60.5087%" y="213" width="0.2453%" height="15" fill="rgb(217,5,26)" fg:x="9913941905" fg:w="40189012"/><text x="60.7587%" y="223.50"></text></g><g><title>chess::board::piece::Piece::rook (3,820,411 samples, 0.02%)</title><rect x="60.7540%" y="213" width="0.0233%" height="15" fill="rgb(235,190,38)" fg:x="9954130917" fg:w="3820411"/><text x="61.0040%" y="223.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref (120,092,242 samples, 0.73%)</title><rect x="62.4950%" y="197" width="0.7330%" height="15" fill="rgb(247,86,24)" fg:x="10239385477" fg:w="120092242"/><text x="62.7450%" y="207.50"></text></g><g><title>&lt;chess::constants::PIECE_ATTACKS as core::ops::deref::Deref&gt;::deref::__stability (120,092,242 samples, 0.73%)</title><rect x="62.4950%" y="181" width="0.7330%" height="15" fill="rgb(205,101,16)" fg:x="10239385477" fg:w="120092242"/><text x="62.7450%" y="191.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (71,236,166 samples, 0.43%)</title><rect x="62.7932%" y="165" width="0.4348%" height="15" fill="rgb(246,168,33)" fg:x="10288241553" fg:w="71236166"/><text x="63.0432%" y="175.50"></text></g><g><title>std::sync::once::Once::call_once (71,236,166 samples, 0.43%)</title><rect x="62.7932%" y="149" width="0.4348%" height="15" fill="rgb(231,114,1)" fg:x="10288241553" fg:w="71236166"/><text x="63.0432%" y="159.50"></text></g><g><title>std::sys::sync::once::futex::Once::is_completed (71,236,166 samples, 0.43%)</title><rect x="62.7932%" y="133" width="0.4348%" height="15" fill="rgb(207,184,53)" fg:x="10288241553" fg:w="71236166"/><text x="63.0432%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (32,650,434 samples, 0.20%)</title><rect x="63.0287%" y="117" width="0.1993%" height="15" fill="rgb(224,95,51)" fg:x="10326827285" fg:w="32650434"/><text x="63.2787%" y="127.50"></text></g><g><title>core::sync::atomic::atomic_load (32,650,434 samples, 0.20%)</title><rect x="63.0287%" y="101" width="0.1993%" height="15" fill="rgb(212,188,45)" fg:x="10326827285" fg:w="32650434"/><text x="63.2787%" y="111.50"></text></g><g><title>&lt;chess::squares::Square as core::convert::From&lt;u64&gt;&gt;::from (48,359,059 samples, 0.30%)</title><rect x="63.2280%" y="197" width="0.2952%" height="15" fill="rgb(223,154,38)" fg:x="10359477719" fg:w="48359059"/><text x="63.4780%" y="207.50"></text></g><g><title>chess::board::piece::Piece::pawn (179,824,306 samples, 1.10%)</title><rect x="63.5232%" y="197" width="1.0975%" height="15" fill="rgb(251,22,52)" fg:x="10407836778" fg:w="179824306"/><text x="63.7732%" y="207.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (331,760,212 samples, 2.02%)</title><rect x="67.0957%" y="149" width="2.0249%" height="15" fill="rgb(229,209,22)" fg:x="10993165935" fg:w="331760212"/><text x="67.3457%" y="159.50">&lt;..</text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (1,317,473,962 samples, 8.04%)</title><rect x="65.7083%" y="165" width="8.0411%" height="15" fill="rgb(234,138,34)" fg:x="10765862953" fg:w="1317473962"/><text x="65.9583%" y="175.50">chess::kogg..</text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (758,410,768 samples, 4.63%)</title><rect x="69.1205%" y="149" width="4.6289%" height="15" fill="rgb(212,95,11)" fg:x="11324926147" fg:w="758410768"/><text x="69.3705%" y="159.50">chess..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (242,790,999 samples, 1.48%)</title><rect x="72.2676%" y="133" width="1.4819%" height="15" fill="rgb(240,179,47)" fg:x="11840545916" fg:w="242790999"/><text x="72.5176%" y="143.50"></text></g><g><title>&lt;chess::shift::Shift as core::ops::deref::Deref&gt;::deref (246,609,909 samples, 1.51%)</title><rect x="74.2722%" y="149" width="1.5052%" height="15" fill="rgb(240,163,11)" fg:x="12168995798" fg:w="246609909"/><text x="74.5222%" y="159.50"></text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (477,701,733 samples, 2.92%)</title><rect x="73.7494%" y="165" width="2.9156%" height="15" fill="rgb(236,37,12)" fg:x="12083336915" fg:w="477701733"/><text x="73.9994%" y="175.50">ch..</text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (145,432,941 samples, 0.89%)</title><rect x="75.7774%" y="149" width="0.8876%" height="15" fill="rgb(232,164,16)" fg:x="12415605707" fg:w="145432941"/><text x="76.0274%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (8,157,373 samples, 0.05%)</title><rect x="76.6152%" y="133" width="0.0498%" height="15" fill="rgb(244,205,15)" fg:x="12552881275" fg:w="8157373"/><text x="76.8652%" y="143.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnbishop_attacks (2,058,793,296 samples, 12.57%)</title><rect x="64.6207%" y="197" width="12.5656%" height="15" fill="rgb(223,117,47)" fg:x="10587661084" fg:w="2058793296"/><text x="64.8707%" y="207.50">chess::piece_attack..</text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (1,880,591,427 samples, 11.48%)</title><rect x="65.7083%" y="181" width="11.4780%" height="15" fill="rgb(244,107,35)" fg:x="10765862953" fg:w="1880591427"/><text x="65.9583%" y="191.50">chess::kogge_ston..</text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (85,415,732 samples, 0.52%)</title><rect x="76.6650%" y="165" width="0.5213%" height="15" fill="rgb(205,140,8)" fg:x="12561038648" fg:w="85415732"/><text x="76.9150%" y="175.50"></text></g><g><title>chess::kogge_stone::KoggeStone::occluded_fill (720,457,066 samples, 4.40%)</title><rect x="77.6064%" y="165" width="4.3972%" height="15" fill="rgb(228,84,46)" fg:x="12715281868" fg:w="720457066"/><text x="77.8564%" y="175.50">chess..</text></g><g><title>chess::kogge_stone::KoggeStone::rotate_left (371,623,959 samples, 2.27%)</title><rect x="79.7355%" y="149" width="2.2682%" height="15" fill="rgb(254,188,9)" fg:x="13064114975" fg:w="371623959"/><text x="79.9855%" y="159.50">c..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_right (274,695,000 samples, 1.68%)</title><rect x="80.3271%" y="133" width="1.6766%" height="15" fill="rgb(206,112,54)" fg:x="13161043934" fg:w="274695000"/><text x="80.5771%" y="143.50"></text></g><g><title>chess::piece_attacks::PieceAttacks::nnrook_attacks (825,976,400 samples, 5.04%)</title><rect x="77.1863%" y="197" width="5.0413%" height="15" fill="rgb(216,84,49)" fg:x="12646454380" fg:w="825976400"/><text x="77.4363%" y="207.50">chess:..</text></g><g><title>chess::kogge_stone::KoggeStone::sliding_attacks (757,148,912 samples, 4.62%)</title><rect x="77.6064%" y="181" width="4.6212%" height="15" fill="rgb(214,194,35)" fg:x="12715281868" fg:w="757148912"/><text x="77.8564%" y="191.50">chess..</text></g><g><title>chess::kogge_stone::KoggeStone::shift_one (36,691,846 samples, 0.22%)</title><rect x="82.0037%" y="165" width="0.2239%" height="15" fill="rgb(249,28,3)" fg:x="13435738934" fg:w="36691846"/><text x="82.2537%" y="175.50"></text></g><g><title>chess::board::piece::&lt;impl core::ops::index::Index&lt;chess::board::piece::Piece&gt; for [T]&gt;::index (32,217,420 samples, 0.20%)</title><rect x="82.2276%" y="181" width="0.1966%" height="15" fill="rgb(222,56,52)" fg:x="13472430780" fg:w="32217420"/><text x="82.4776%" y="191.50"></text></g><g><title>chess::board::state::board::Board::is_square_attacked (3,563,046,435 samples, 21.75%)</title><rect x="60.7773%" y="213" width="21.7467%" height="15" fill="rgb(245,217,50)" fg:x="9957951328" fg:w="3563046435"/><text x="61.0273%" y="223.50">chess::board::state::board::Board:..</text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (48,566,983 samples, 0.30%)</title><rect x="82.2276%" y="197" width="0.2964%" height="15" fill="rgb(213,201,24)" fg:x="13472430780" fg:w="48566983"/><text x="82.4776%" y="207.50"></text></g><g><title>chess::color::&lt;impl core::ops::index::Index&lt;chess::color::Color&gt; for [T]&gt;::index (16,349,563 samples, 0.10%)</title><rect x="82.4242%" y="181" width="0.0998%" height="15" fill="rgb(248,116,28)" fg:x="13504648200" fg:w="16349563"/><text x="82.6742%" y="191.50"></text></g><g><title>chess::board::state::board::Board::validate_castling_move (7,786,788 samples, 0.05%)</title><rect x="82.5240%" y="213" width="0.0475%" height="15" fill="rgb(219,72,43)" fg:x="13520997763" fg:w="7786788"/><text x="82.7740%" y="223.50"></text></g><g><title>chess::board::piece::&lt;impl core::ops::index::Index&lt;chess::board::piece::Piece&gt; for [T]&gt;::index (4,090,989 samples, 0.02%)</title><rect x="82.5716%" y="197" width="0.0250%" height="15" fill="rgb(209,138,14)" fg:x="13528784551" fg:w="4090989"/><text x="82.8216%" y="207.50"></text></g><g><title>core::array::&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (7,726,064 samples, 0.05%)</title><rect x="82.5716%" y="213" width="0.0472%" height="15" fill="rgb(222,18,33)" fg:x="13528784551" fg:w="7726064"/><text x="82.8216%" y="223.50"></text></g><g><title>chess::squares::&lt;impl core::ops::index::Index&lt;chess::squares::Square&gt; for [T]&gt;::index (3,635,075 samples, 0.02%)</title><rect x="82.5965%" y="197" width="0.0222%" height="15" fill="rgb(213,199,7)" fg:x="13532875540" fg:w="3635075"/><text x="82.8465%" y="207.50"></text></g><g><title>core::cmp::PartialEq::ne (20,437,082 samples, 0.12%)</title><rect x="82.6187%" y="213" width="0.1247%" height="15" fill="rgb(250,110,10)" fg:x="13536510615" fg:w="20437082"/><text x="82.8687%" y="223.50"></text></g><g><title>&lt;chess::color::Color as core::cmp::PartialEq&gt;::eq (20,437,082 samples, 0.12%)</title><rect x="82.6187%" y="197" width="0.1247%" height="15" fill="rgb(248,123,6)" fg:x="13536510615" fg:w="20437082"/><text x="82.8687%" y="207.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::to_digit (178,992,702 samples, 1.09%)</title><rect x="89.8101%" y="181" width="1.0925%" height="15" fill="rgb(206,91,31)" fg:x="14714773319" fg:w="178992702"/><text x="90.0601%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (73,651,651 samples, 0.45%)</title><rect x="90.4531%" y="165" width="0.4495%" height="15" fill="rgb(211,154,13)" fg:x="14820114370" fg:w="73651651"/><text x="90.7031%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (56,443,237 samples, 0.34%)</title><rect x="90.9026%" y="181" width="0.3445%" height="15" fill="rgb(225,148,7)" fg:x="14893766021" fg:w="56443237"/><text x="91.1526%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::from_str_radix (1,400,929,871 samples, 8.55%)</title><rect x="82.7435%" y="213" width="8.5504%" height="15" fill="rgb(220,160,43)" fg:x="13556947697" fg:w="1400929871"/><text x="82.9935%" y="223.50">core::num::&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::from_str_radix (971,603,368 samples, 5.93%)</title><rect x="85.3638%" y="197" width="5.9301%" height="15" fill="rgb(213,52,39)" fg:x="13986274200" fg:w="971603368"/><text x="85.6138%" y="207.50">core::nu..</text></g><g><title>core::num::can_not_overflow (7,668,310 samples, 0.05%)</title><rect x="91.2471%" y="181" width="0.0468%" height="15" fill="rgb(243,137,7)" fg:x="14950209258" fg:w="7668310"/><text x="91.4971%" y="191.50"></text></g><g><title>[libc-2.31.so] (48,625,952 samples, 0.30%)</title><rect x="91.3188%" y="117" width="0.2968%" height="15" fill="rgb(230,79,13)" fg:x="14961958085" fg:w="48625952"/><text x="91.5688%" y="127.50"></text></g><g><title>__GI___libc_free (251,992,207 samples, 1.54%)</title><rect x="91.6156%" y="117" width="1.5380%" height="15" fill="rgb(247,105,23)" fg:x="15010584037" fg:w="251992207"/><text x="91.8656%" y="127.50"></text></g><g><title>__rdl_dealloc (44,797,984 samples, 0.27%)</title><rect x="93.1536%" y="117" width="0.2734%" height="15" fill="rgb(223,179,41)" fg:x="15262576244" fg:w="44797984"/><text x="93.4036%" y="127.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44,797,984 samples, 0.27%)</title><rect x="93.1536%" y="101" width="0.2734%" height="15" fill="rgb(218,9,34)" fg:x="15262576244" fg:w="44797984"/><text x="93.4036%" y="111.50"></text></g><g><title>__rust_dealloc (64,895,380 samples, 0.40%)</title><rect x="93.4270%" y="117" width="0.3961%" height="15" fill="rgb(222,106,8)" fg:x="15307374228" fg:w="64895380"/><text x="93.6770%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,319,742,880 samples, 8.05%)</title><rect x="91.2939%" y="213" width="8.0549%" height="15" fill="rgb(211,220,0)" fg:x="14957877568" fg:w="1319742880"/><text x="91.5439%" y="223.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,319,742,880 samples, 8.05%)</title><rect x="91.2939%" y="197" width="8.0549%" height="15" fill="rgb(229,52,16)" fg:x="14957877568" fg:w="1319742880"/><text x="91.5439%" y="207.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,319,742,880 samples, 8.05%)</title><rect x="91.2939%" y="181" width="8.0549%" height="15" fill="rgb(212,155,18)" fg:x="14957877568" fg:w="1319742880"/><text x="91.5439%" y="191.50">core::ptr::..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,319,742,880 samples, 8.05%)</title><rect x="91.2939%" y="165" width="8.0549%" height="15" fill="rgb(242,21,14)" fg:x="14957877568" fg:w="1319742880"/><text x="91.5439%" y="175.50">&lt;alloc::raw..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,319,742,880 samples, 8.05%)</title><rect x="91.2939%" y="149" width="8.0549%" height="15" fill="rgb(222,19,48)" fg:x="14957877568" fg:w="1319742880"/><text x="91.5439%" y="159.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::dealloc (1,319,742,880 samples, 8.05%)</title><rect x="91.2939%" y="133" width="8.0549%" height="15" fill="rgb(232,45,27)" fg:x="14957877568" fg:w="1319742880"/><text x="91.5439%" y="143.50">alloc::allo..</text></g><g><title>_int_free (905,350,840 samples, 5.53%)</title><rect x="93.8231%" y="117" width="5.5257%" height="15" fill="rgb(249,103,42)" fg:x="15372269608" fg:w="905350840"/><text x="94.0731%" y="127.50">_int_fr..</text></g><g><title>chess::board::state::board::Board::make_move (10,393,449,790 samples, 63.44%)</title><rect x="36.0858%" y="229" width="63.4354%" height="15" fill="rgb(246,81,33)" fg:x="5912407181" fg:w="10393449790"/><text x="36.3358%" y="239.50">chess::board::state::board::Board::make_move</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (28,236,523 samples, 0.17%)</title><rect x="99.3488%" y="213" width="0.1723%" height="15" fill="rgb(252,33,42)" fg:x="16277620448" fg:w="28236523"/><text x="99.5988%" y="223.50"></text></g><g><title>chess::perft::Perft::driver (32,282,256 samples, 0.20%)</title><rect x="99.5211%" y="229" width="0.1970%" height="15" fill="rgb(209,212,41)" fg:x="16305856971" fg:w="32282256"/><text x="99.7711%" y="239.50"></text></g><g><title>__libc_start_main (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="565" width="80.8426%" height="15" fill="rgb(207,154,6)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="575.50">__libc_start_main</text></g><g><title>main (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="549" width="80.8426%" height="15" fill="rgb(223,64,47)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="533" width="80.8426%" height="15" fill="rgb(211,161,38)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="517" width="80.8426%" height="15" fill="rgb(219,138,40)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="501" width="80.8426%" height="15" fill="rgb(241,228,46)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="485" width="80.8426%" height="15" fill="rgb(223,209,38)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="469" width="80.8426%" height="15" fill="rgb(236,164,45)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="479.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="453" width="80.8426%" height="15" fill="rgb(231,15,5)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="437" width="80.8426%" height="15" fill="rgb(252,35,15)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="421" width="80.8426%" height="15" fill="rgb(248,181,18)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="405" width="80.8426%" height="15" fill="rgb(233,39,42)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="389" width="80.8426%" height="15" fill="rgb(238,110,33)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="399.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="373" width="80.8426%" height="15" fill="rgb(233,195,10)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="357" width="80.8426%" height="15" fill="rgb(254,105,3)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>chess::perft::Perft::start (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="341" width="80.8426%" height="15" fill="rgb(221,225,9)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="351.50">chess::perft::Perft::start</text></g><g><title>chess::perft::Perft::test (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="325" width="80.8426%" height="15" fill="rgb(224,227,45)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="335.50">chess::perft::Perft::test</text></g><g><title>chess::perft::Perft::driver (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="309" width="80.8426%" height="15" fill="rgb(229,198,43)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="319.50">chess::perft::Perft::driver</text></g><g><title>chess::perft::Perft::driver (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="293" width="80.8426%" height="15" fill="rgb(206,209,35)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="303.50">chess::perft::Perft::driver</text></g><g><title>chess::perft::Perft::driver (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="277" width="80.8426%" height="15" fill="rgb(245,195,53)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="287.50">chess::perft::Perft::driver</text></g><g><title>chess::perft::Perft::driver (13,245,504,432 samples, 80.84%)</title><rect x="18.9004%" y="261" width="80.8426%" height="15" fill="rgb(240,92,26)" fg:x="3096708628" fg:w="13245504432"/><text x="19.1504%" y="271.50">chess::perft::Perft::driver</text></g><g><title>chess::perft::Perft::driver (12,892,632,132 samples, 78.69%)</title><rect x="21.0542%" y="245" width="78.6889%" height="15" fill="rgb(207,40,23)" fg:x="3449580928" fg:w="12892632132"/><text x="21.3042%" y="255.50">chess::perft::Perft::driver</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,073,833 samples, 0.02%)</title><rect x="99.7182%" y="229" width="0.0249%" height="15" fill="rgb(223,111,35)" fg:x="16338139227" fg:w="4073833"/><text x="99.9682%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,073,833 samples, 0.02%)</title><rect x="99.7182%" y="213" width="0.0249%" height="15" fill="rgb(229,147,28)" fg:x="16338139227" fg:w="4073833"/><text x="99.9682%" y="223.50"></text></g><g><title>_start (13,246,994,773 samples, 80.85%)</title><rect x="18.9004%" y="581" width="80.8517%" height="15" fill="rgb(211,29,28)" fg:x="3096707643" fg:w="13246994773"/><text x="19.1504%" y="591.50">_start</text></g><g><title>chess::board::state::board::Board::gen_movement (4,085,693 samples, 0.02%)</title><rect x="99.7521%" y="581" width="0.0249%" height="15" fill="rgb(228,72,33)" fg:x="16343702416" fg:w="4085693"/><text x="100.0021%" y="591.50"></text></g><g><title>chess::board::state::board::Board::get_pawn_attacks (4,085,693 samples, 0.02%)</title><rect x="99.7521%" y="565" width="0.0249%" height="15" fill="rgb(205,214,31)" fg:x="16343702416" fg:w="4085693"/><text x="100.0021%" y="575.50"></text></g><g><title>&lt;u8 as alloc::string::ToString&gt;::to_string (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="565" width="0.0250%" height="15" fill="rgb(224,111,15)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="549" width="0.0250%" height="15" fill="rgb(253,21,26)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="533" width="0.0250%" height="15" fill="rgb(245,139,43)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="517" width="0.0250%" height="15" fill="rgb(252,170,7)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="501" width="0.0250%" height="15" fill="rgb(231,118,14)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="485" width="0.0250%" height="15" fill="rgb(238,83,0)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="469" width="0.0250%" height="15" fill="rgb(221,39,39)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="453" width="0.0250%" height="15" fill="rgb(222,119,46)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="463.50"></text></g><g><title>alloc::alloc::alloc (4,092,423 samples, 0.02%)</title><rect x="99.8269%" y="437" width="0.0250%" height="15" fill="rgb(222,165,49)" fg:x="16355947552" fg:w="4092423"/><text x="100.0769%" y="447.50"></text></g><g><title>chess::board::state::board::Board::make_move (32,692,601 samples, 0.20%)</title><rect x="99.7771%" y="581" width="0.1995%" height="15" fill="rgb(219,113,52)" fg:x="16347788109" fg:w="32692601"/><text x="100.0271%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (20,440,735 samples, 0.12%)</title><rect x="99.8518%" y="565" width="0.1248%" height="15" fill="rgb(214,7,15)" fg:x="16360039975" fg:w="20440735"/><text x="100.1018%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (20,440,735 samples, 0.12%)</title><rect x="99.8518%" y="549" width="0.1248%" height="15" fill="rgb(235,32,4)" fg:x="16360039975" fg:w="20440735"/><text x="100.1018%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (20,440,735 samples, 0.12%)</title><rect x="99.8518%" y="533" width="0.1248%" height="15" fill="rgb(238,90,54)" fg:x="16360039975" fg:w="20440735"/><text x="100.1018%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20,440,735 samples, 0.12%)</title><rect x="99.8518%" y="517" width="0.1248%" height="15" fill="rgb(213,208,19)" fg:x="16360039975" fg:w="20440735"/><text x="100.1018%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20,440,735 samples, 0.12%)</title><rect x="99.8518%" y="501" width="0.1248%" height="15" fill="rgb(233,156,4)" fg:x="16360039975" fg:w="20440735"/><text x="100.1018%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (20,440,735 samples, 0.12%)</title><rect x="99.8518%" y="485" width="0.1248%" height="15" fill="rgb(207,194,5)" fg:x="16360039975" fg:w="20440735"/><text x="100.1018%" y="495.50"></text></g><g><title>all (16,384,315,244 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(206,111,30)" fg:x="0" fg:w="16384315244"/><text x="0.2500%" y="623.50"></text></g><g><title>chess (16,384,315,244 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(243,70,54)" fg:x="0" fg:w="16384315244"/><text x="0.2500%" y="607.50">chess</text></g><g><title>malloc_consolidate (3,834,534 samples, 0.02%)</title><rect x="99.9766%" y="581" width="0.0234%" height="15" fill="rgb(242,28,8)" fg:x="16380480710" fg:w="3834534"/><text x="100.2266%" y="591.50"></text></g></svg></svg>