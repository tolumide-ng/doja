

#[derive(Debug, Clone, Copy)]
pub enum Square {
    A8=0, B8=1, C8=2, D8=3, E8=4, F8=5, G8=6, H8=7,
    A7=8, B7=9, C7=10, D7=11, E7=12, F7=13, G7=14, H7=15,
    A6=16, B6=17, C6=18, D6=19, E6=20, F6=21, G6=22, H6=23,
    A5=24, B5=25, C5=26, D5=27, E5=28, F5=29, G5=30, H5=31,
    A4=32, B4=33, C4=34, D4=35, E4=36, F4=37, G4=38, H4=39,
    A3=40, B3=41, C3=42, D3=43, E3=44, F3=45, G3=46, H3=47,
    A2=48, B2=49, C2=50, D2=51, E2=52, F2=53, G2=54, H2=55,
    A1=56, B1=57, C1=58, D1=59, E1=60, F1=61, G1=62, H1=63,
}

impl From<Square> for u64 {
    fn from(value: Square) -> Self {
        value as u64
    }
}


pub(crate) const SQUARE_NAMES: [&str; 64] = [
    "A8", "B8", "C8", "D8", "E8", "F8", "G8", "H8",
    "A7", "B7", "C7", "D7", "E7", "F7", "G7", "H7",
    "A6", "B6", "C6", "D6", "E6", "F6", "G6", "H6",
    "A5", "B5", "C5", "D5", "E5", "F5", "G5", "H5",
    "A4", "B4", "C4", "D4", "E4", "F4", "G4", "H4",
    "A3", "B3", "C3", "D3", "E3", "F3", "G3", "H3",
    "A2", "B2", "C2", "D2", "E2", "F2", "G2", "H2",
    "A1", "B1", "C1", "D1", "E1", "F1", "G1", "H1",
];


// pub enum Square {
//     A8=57, B8=58, C8=59, D8=60, E8=61, F8=62, G8=63, H8=64,
//     A6=41, B6=42, C6=43, D6=44, E6=45, F6=46, G6=47, H6=48,
//     A7=49, B7=50, C7=51, D7=52, E7=53, F7=54, G7=55, H7=56,
//     A5=33, B5=34, C5=35, D5=36, E5=37, F5=38, G5=39, H5=40,
//     A4=25, B4=26, C4=27, D4=28, E4=29, F4=30, G4=31, H4=32,
//     A3=17, B3=18, C3=19, D3=20, E3=21, F3=22, G3=23, H3=24,
//     A2=9, B2=10, C2=11, D2=12, E2=13, F2=14, G2=15, H2=16,
//     A1=1, B1=2, C1=3, D1=4, E1=5, F1=6, G1=7, H1=8,
// }

// impl From<Square> for u64 {
//     fn from(value: Square) -> Self {
//         value as u64
//     }
// }










// pub enum Square {
//     A8, B8, C8, D8, E8, F8, G8, H8,
//     A7, B7, C7, D7, E7, F7, G7, H7,
//     A6, B6, C6, D6, E6, F6, G6, H6,
//     A5, B5, C5, D5, E5, F5, G5, H5,
//     A4, B4, C4, D4, E4, F4, G4, H4,
//     A3, B3, C3, D3, E3, F3, G3, H3,
//     A2, B2, C2, D2, E2, F2, G2, H2,
//     A1, B1, C1, D1, E1, F1, G1, H1, 
// }

// impl From<Square> for u64 {
//     fn from(value: Square) -> Self {
//         match value {
//             Square::A1 | Square::A2 => {1},
//             _ => {0}
//         }
//     }
// }


// A8=1, B8=2, C8=3, D8=4, E8=5, F8=6, G8=7, H8=8,
// A7=9, B7=10, C7=11, D7=12, E7=13, F7=14, G7=15, H7=16,
// A6=17, B6=18, C6=19, D6=20, E6=21, F6=22, G6=23, H6=24,
// A5=25, B5=26, C5=27, D5=28, E5=29, F5=30, G5=31, H5=32,
// A4=33, B4=34, C4=35, D4=36, E4=37, F4=38, G4=39, H4=40,
// A3=41, B3=42, C3=43, D3=44, E3=45, F3=46, G3=47, H3=48,
// A2=49, B2=50, C2=51, D2=52, E2=53, F2=54, G2=55, H2=56,
// A1=57, B1=58, C1=59, D1=60, E1=61, F1=62, G1=63, H1=64,